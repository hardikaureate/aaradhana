"use strict";

const detectFramework = require('../frameworks/detectFramework');

const {
  installDependencies
} = require('./packageManager');

const addIgnore = require('./addIgnore');

const get = require('lodash/get');

const resolveInPackage = require('./resolveInPackage');

const logo = require('./logo');

const isPackageInstalled = require('../frameworks/isPackageInstalled');

module.exports = async function init({
  context,
  version,
  skipXdnDeps,
  connector
}) {
  const {
    logger
  } = context;

  if (connector) {
    connector = {
      builder: connector
    };
  } else {
    connector = await detectFramework();
  } // add @xdn/* as built time dependencies


  const devDependencies = {
    '@xdn/core': version,
    '@xdn/cli': version,
    '@xdn/prefetch': version,
    '@xdn/devtools': version
  };
  const dependencies = {};

  if (connector) {
    const addLib = (lib, depArray) => {
      depArray[lib] = lib.startsWith('@xdn/') ? version : 'latest';
    }; // install the connector if it's not already installed or a path to a local directory


    if (!connector.builder.startsWith('./') && !isPackageInstalled(connector.builder)) {
      devDependencies[connector.builder] = version;
    }

    if (connector.devDependencies) {
      connector.devDependencies.forEach(lib => addLib(lib, devDependencies));
    } // add runtime dependencies


    if (connector.dependencies) {
      connector.dependencies.forEach(lib => addLib(lib, dependencies));
      await installDependencies(dependencies);
    }
  }

  await installDependencies(devDependencies, {
    dev: true,
    skipXdnDeps
  });
  addIgnore();

  let initScript = require(resolveInPackage(get(connector, 'builder', '@xdn/core'), `init`)); // use default export if provided, otherwise use module.exports


  if (initScript.default) {
    initScript = initScript.default;
  }

  await initScript();
  logger.title(`\nðŸŽ‰ Your app is now ready to deploy on the ${logo}!\n`);
};