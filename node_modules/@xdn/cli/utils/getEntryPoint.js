"use strict";

const resolveInPackage = require('./resolveInPackage');

const getXdnConfig = require('./getXdnConfig');

const slash = require('slash');

const {
  join
} = require('path');

const {
  existsSync
} = require('fs');

const {
  getInstallCommand
} = require('./packageManager');

const chalk = require('chalk');

const detectFramework = require('../frameworks/detectFramework');
/**
 * Gets the specified entrypoint based on the value of the connector property in xdn.config.js
 * @param {String} name The entry point name
 * @return {Object} The default export or module.exports of the entrypoint
 */


module.exports = async function getEntryPoint(name) {
  let {
    connector
  } = getXdnConfig();
  let entryPoint;

  if (!connector) {
    // fallback to framework detection if no connector is specified in xdn.config.js
    console.log('No connector specified in xdn.config.js, falling back to framework detection...');
    let framework;

    try {
      framework = await detectFramework();
    } catch (e) {// will get here if there is no package.json
    }

    if (framework) {
      connector = process.env.XDN_CONNECTOR = framework.builder;
      console.log(`Detected framework ${framework.name}. Using connector ${connector}.`);
      console.warn(chalk.yellow(`Warning: Not explicitly declaring an XDN connector is deprecated. Please add the following to xdn.config.js:`));
      console.warn(`\n  connector: '${connector}',\n`);
    } else {
      connector = '@xdn/core';
      console.log('No framework detected.');
    }
  }

  if (connector.startsWith('.')) {
    // relative path - ad hoc connector in the app itself
    entryPoint = join(process.cwd(), connector, `${name}.js`);

    if (!existsSync(entryPoint)) {
      // Load the entry point default from the core.
      entryPoint = resolveInPackage('@xdn/core', name);
    }
  } else {
    // a connector package
    try {
      entryPoint = resolveInPackage(connector, name);
    } catch (e) {
      console.error(`Connector package ${connector} not found. Try installing it with\n\n  ${chalk.yellow(`${getInstallCommand()} ${connector}`)}\n`);
      process.exit(0);
    }
  }

  const mod = require(slash(entryPoint));

  return mod.default || mod;
};