"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var shelljs_1 = __importDefault(require("shelljs"));
var nonWebpackRequire_1 = __importDefault(require("../utils/nonWebpackRequire"));
// we don't bundle chalk because it's large and we only use it in development
var chalk = nonWebpackRequire_1.default('chalk');
/**
 * Runs the user's app in development mode
 * @param port The port on which to listen
 * @param local Describes how to construct the command that runs the app
 * @returns A promise that resolves when the app is ready to receive requests.
 */
function runLocalApp(port, options) {
    var command = options.command;
    /* istanbul ignore next */
    if (!command)
        return;
    var label = chalk.grey(options.label || 'app');
    return new Promise(function (resolve, reject) {
        var _a, _b;
        try {
            var childProcess = shelljs_1.default.exec(command(port), {
                async: true,
                env: __assign(__assign({}, process.env), { PORT: port.toString(), FORCE_COLOR: 'true' }),
                silent: true,
            }, function (code) {
                if (code > 0) {
                    console.error(chalk.red('The XDN encountered a fatal error while running your application. Exiting...'));
                    reject();
                    process.exit(code);
                }
                else {
                    resolve();
                }
            });
            /* istanbul ignore next */
            (_a = childProcess.stderr) === null || _a === void 0 ? void 0 : _a.on('data', function (data) { return process.stderr.write(label + " " + data); });
            var ready_1 = options.ready || [];
            var filterOutput_1 = options.filterOutput || (function (_line) { return true; });
            /* istanbul ignore next */
            (_b = childProcess.stdout) === null || _b === void 0 ? void 0 : _b.on('data', function (data) {
                var matched = false;
                ready_1.some(function (pattern, i) {
                    if (pattern.test(data)) {
                        ready_1.splice(i, 1);
                        matched = true;
                    }
                });
                if (ready_1.length === 0) {
                    resolve();
                }
                if (matched || !filterOutput_1(data)) {
                    return; // hide the ready line so that the user doesn't see two URLs and get confused.
                }
                process.stdout.write(label + " " + data);
                if (!data.endsWith('\n')) {
                    process.stdout.write('\n');
                }
            });
        }
        catch (e) {
            reject(e);
        }
    });
}
exports.default = runLocalApp;
