"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/* istanbul ignore file */
var path_1 = require("path");
var constants_1 = require("../constants");
var bundle_1 = require("../deploy/bundle");
var express_1 = __importDefault(require("express"));
var loadRouter_1 = __importDefault(require("../router/loadRouter"));
var chalk_1 = __importDefault(require("chalk"));
var Cache_1 = require("../cache/Cache");
var timing_1 = require("../timing");
var logo_1 = __importStar(require("../utils/logo"));
var http_proxy_1 = __importDefault(require("http-proxy"));
var runLocalApp_1 = __importDefault(require("./runLocalApp"));
var webpack_1 = require("webpack");
// compatible type definitions are not yet available for this after updating to webpack 5
var middleware = require('webpack-dev-middleware');
/**
 * Creates a development server to simulate the XDN locally.  Changes to your routes are automatically
 * applied without restarting `xdn run`.
 * @param appReady An optional promise that resolves when your app is to receive requests
 * @returns A promise that resolves when the XDN is ready to receive requests
 */
function createDevServer(options) {
    var _this = this;
    process.env.XDN_LOCAL = 'true';
    var port = Number(process.env.PORT || '3000');
    var jsPort = port + 1;
    var assetPort = port + 2;
    var xdn = express_1.default();
    var compiler = bundle_1.createCompiler();
    var appReady = (options === null || options === void 0 ? void 0 : options.command) ? runLocalApp_1.default(jsPort, options) : Promise.resolve();
    // Optional additional compiler provided by the user
    if (options === null || options === void 0 ? void 0 : options.webpackConfig) {
        xdn.use(middleware(webpack_1.webpack(options.webpackConfig), {
            writeToDisk: true,
            publicPath: path_1.join(process.cwd(), '.xdn', 's3'),
        }));
    }
    // The router compiler
    xdn.use(middleware(compiler, {
        writeToDisk: true,
        publicPath: path_1.join(process.cwd(), '.xdn', 's3'),
    }));
    var router;
    var logLevels = new Set(['warn', 'error']);
    // only show warn and error log output from webpack
    compiler.hooks.infrastructureLog.tap('xdn', function (source, level, messages) {
        var e_1, _a;
        if (logLevels.has(level)) {
            try {
                for (var messages_1 = __values(messages), messages_1_1 = messages_1.next(); !messages_1_1.done; messages_1_1 = messages_1.next()) {
                    var message = messages_1_1.value;
                    console.log((level === 'warn' ? logo_1.warnLogLabel : logo_1.errorLogLabel) + " " + message.trim());
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (messages_1_1 && !messages_1_1.done && (_a = messages_1.return)) _a.call(messages_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return true;
    });
    var routerReady = new Promise(function (resolve, reject) {
        compiler.hooks.beforeCompile.tap('xdn', function () { });
        compiler.hooks.afterEmit.tap('xdn', function () {
            Cache_1.clearCache();
            // Ensure that the router is reloaded when a new version is compiled
            // Note: there is a known memory leak here, but if we only reload the router when the user changes it,
            // the memory growth will be slow enough to not be noticeable in most cases.
            try {
                delete require.cache[bundle_1.ROUTER_DESTINATION];
                router = loadRouter_1.default(bundle_1.ROUTER_DESTINATION)
                    .setBackend(constants_1.BACKENDS.permanentStatic, { domainOrIp: '127.0.0.1', port: assetPort })
                    .setBackend(constants_1.BACKENDS.static, { domainOrIp: '127.0.0.1', port: assetPort })
                    .setBackend(constants_1.BACKENDS.js, { domainOrIp: '127.0.0.1', port: jsPort });
                resolve();
            }
            catch (e) {
                reject(e);
            }
        });
    });
    // `router` will always be initialized as the middleware will stop incoming requests until build is done.
    xdn.use(timing_1.withTimings(function (req, res) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, routerReady];
                case 1:
                    _a.sent();
                    return [2 /*return*/, router.run(req, res)]; // @ts-ignore TypeScript complains here because our Request and Response objects don't exactly match express's
            }
        });
    }); }));
    var xdnReady = new Promise(function (resolve, reject) {
        try {
            var server = xdn.listen(port, resolve);
            // Proxy websocket requests to the JS backend. Gatsby needs this for example.
            var proxy_1 = http_proxy_1.default.createProxyServer({
                target: {
                    host: '127.0.0.1',
                    port: jsPort,
                },
            });
            server.on('upgrade', function (req, socket, head) {
                proxy_1.ws(req, socket, head);
            });
            server.on('error', function (error) {
                console.log(error.message);
            });
        }
        catch (e) {
            reject(e);
        }
    });
    return Promise.all([routerReady, appReady, xdnReady])
        .then(function () {
        console.log('\n' +
            logo_1.default +
            ' ' +
            chalk_1.default.green("ready on " + chalk_1.default.bold(chalk_1.default.underline("http://127.0.0.1:" + port + "\n"))));
    })
        .catch(function (err) { return console.log('error', err); });
}
exports.default = createDevServer;
