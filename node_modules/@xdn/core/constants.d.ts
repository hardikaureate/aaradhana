/**
 * XDN configuration file name.
 */
export declare const XDN_CONFIG_FILE = "xdn.config.js";
/**
 * Indicate asset files that need to be uploaded under a different
 * bucket key.
 * It contains values like
 * {
 *   '/posts' => '/posts/index.html'
 * }
 */
export declare const XDN_ASSET_ALIASES_FILE = "asset-aliases.json";
/**
 * Environment variables used by XDN.
 */
export declare const XDN_ENV_VARIABLES: {
    /**
     * XDN configuration environment variable key.
     */
    config: string;
    /**
     * Indicates whether code is running locally or in the cloud.
     * @private
     */
    deploymentType: string;
    /**
     * Allows Moovweb development team to easily override the XDN version
     * during development process.
     * @private
     */
    versionOverride: string;
};
/**
 * Indicates that code is running in AWS.
 * @private
 */
export declare const XDN_DEPLOYMENT_TYPE_AWS = "AWS";
/**
 * Prefix of all XDN headers.
 */
export declare const XDN_HEADERS_PREFIX = "x-xdn-";
/**
 * Maximum number of user headers allowed by XDN platform.
 *
 * We limit the request and response headers allowed to 70. This is due to a limitation that edge has
 * which at the moment supports up to 96 headers. Edge provider itself needs to use some of those headers
 * with the remainder used by our edge code.
 *
 * NOTE: This constant must be equal ot the constant of the same name defined in XDN buffer proxy.
 * NOTE: If this constant is updated then the constant of the same name has to be updated in @xdn/build-lambda module.
 */
export declare const XDN_MAX_USER_HEADERS_ALLOWED = 70;
/**
 * Status code returned when there are too many request or response headers.
 *
 * Must be equal to HeaderOverflowError status code as defined in build lambda and XDN buffer proxy.
 */
export declare const XDN_TOO_MANY_HEADERS_STATUS_CODE = 542;
/**
 * The status code returned when the xdn_prefetch query param is present and a response could not be found in the cache.
 */
export declare const XDN_UNCACHED_PREFETCH_STATUS = 412;
/**
 * CDN-as-code configuration actions
 */
export declare const ACTIONS: {
    setHeader: string;
    updateHeader: string;
    removeHeader: string;
    syntheticRes: string;
    updatePath: string;
    proxy: string;
    addCookie: string;
    updateCookie: string;
    removeCookie: string;
};
/**
 * The backend for cloud functions
 */
export declare const BACKENDS: {
    js: string;
    static: string;
    permanentStatic: string;
    imageOptimizer: string;
};
export declare const HTTP_METHODS: {
    head: string;
    get: string;
    post: string;
    delete: string;
    put: string;
    patch: string;
    options: string;
};
/**
 * Common HTTP headers.
 */
export declare const HTTP_HEADERS: {
    authorization: string;
    acceptEncoding: string;
    cacheControl: string;
    contentEncoding: string;
    contentLength: string;
    contentType: string;
    cookie: string;
    host: string;
    location: string;
    serverTiming: string;
    setCookie: string;
    userAgent: string;
    vary: string;
    xForwardedFor: string;
    xRequestId: string;
    xSwCacheControl: string;
    xXdnBrowser: string;
    xXdnCacheControl: string;
    xXdnCachingStatus: string;
    xXdnClientIp: string;
    xXdnComponents: string;
    xXdnDestination: string;
    xXdnDevice: string;
    xXdnDeviceIsBot: string;
    xXdnGeoCity: string;
    xXdnGeoCountryCode: string;
    xXdnGeoLatitude: string;
    xXdnGeoLongitude: string;
    xXdnGeoPostalCode: string;
    xXdnMatchedRoutes: string;
    xXdnProtocol: string;
    xXdnRoute: string;
    xXdnStatus: string;
    xXdnT: string;
    xXdnUserT: string;
    xXdnVendor: string;
    xXdnVersion: string;
};
/**
 * Values for x-xdn-caching-status
 */
export declare const CACHING_STATUS: {
    ok: string;
    private: string;
    method: string;
    bodyTooBig: string;
    code: string;
    setCookie: string;
    noMaxAge: string;
};
export declare const CACHEABLE_METHODS: Set<string>;
/**
 * When present, this query parameter will cause the XDN ro return a 412 status
 * if a response could not be found in the cache.
 */
export declare const PREFETCH_QUERY_PARAM = "xdn_prefetch";
/**
 * The name of the query parameter used to detect HEAD requests.
 */
export declare const HEAD_QUERY_PARAM = "xdn_head";
/**
 * The name of the query parameter used for the body of POST requests, which is used for the cache key
 */
export declare const POST_BODY_QUERY_PARAM = "pref_xdn_body";
/**
 * The name of the query parameter used for the method of requests, which is used for the cache key
 */
export declare const METHOD_QUERY_PARAM = "pref_xdn_method";
/**
 * Route Group name, which is used in router for fallback routes
 */
export declare const ROUTES_FALLBACK = "fallback";
/**
 * The path for the built-in image optimizer.
 */
export declare const XDN_IMAGE_OPTIMIZER_PATH = "/__xdn_image_optimizer";
