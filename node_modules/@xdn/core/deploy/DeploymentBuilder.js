"use strict";
/* istanbul ignore file */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_extra_1 = require("fs-extra");
var some_1 = __importDefault(require("lodash/some"));
var isEmpty_1 = __importDefault(require("lodash/isEmpty"));
var shelljs_1 = __importDefault(require("shelljs"));
var path_1 = require("path");
var bundle_1 = __importStar(require("./bundle"));
var globby_1 = __importDefault(require("globby"));
var chalk_1 = __importDefault(require("chalk"));
var config_1 = __importDefault(require("../config"));
var paths_1 = require("./paths");
var init_1 = require("../init");
var routeToFiles_1 = require("./routeToFiles");
var constants_1 = require("../constants");
var RouteGroup_1 = require("../router/RouteGroup");
var listSources_1 = __importDefault(require("./listSources"));
var resolveInPackage_1 = __importDefault(require("./resolveInPackage"));
var paths_2 = require("./paths");
var loadRouter_1 = __importDefault(require("../router/loadRouter"));
var source_1 = require("../source");
/**
 * The class helps you bundle apps for deployment on the Moovweb XDN.
 */
var DeploymentBuilder = /** @class */ (function () {
    function DeploymentBuilder(appDir) {
        if (appDir === void 0) { appDir = process.cwd(); }
        // This structure has connasence of structure, names and types with XDN subaccount deployment lambda.
        this.assetExpiration = {};
        this.appDir = appDir;
        this.xdnDir = path_1.join(this.appDir, paths_1.XDN_DIR);
        this.jsDir = path_1.join(this.appDir, paths_1.JS_DIR);
        this.staticAssetsDir = path_1.join(this.appDir, paths_1.ASSETS_DIR);
        this.permanentStaticAssetsDir = path_1.join(this.appDir, paths_1.PERMANENT_ASSETS_DIR);
        this.sourcesDir = path_1.join(this.appDir, paths_1.SOURCES_DIR);
        this.assetAliases = {};
    }
    /**
     * Logs a message to the console if process.env.debug is set to true
     * @param msg The message to log
     */
    DeploymentBuilder.prototype.log = function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        if (process.env.DEBUG === 'true') {
            console.log.apply(console, __spread(['[XDN BUILD]:'], msg));
        }
    };
    /**
     * Runs a command.
     * @param path The command to run
     * @param options Options for shelljs
     * @return {Promise} A promise that resolves when the command is finished.
     */
    DeploymentBuilder.prototype.exec = function (command, options) {
        if (options === void 0) { options = {}; }
        return new Promise(function (resolve, reject) {
            shelljs_1.default.exec(command, options, function (code, stdout, stderr) {
                if (code != 0)
                    return reject(new Error(stderr));
                return resolve(stdout);
            });
        });
    };
    /**
     * Adds an asset to the bundle for JavaScript workers
     * @param src The source path
     * @param dest An optional destination path within the lambda root directory.
     * If not provided, the destination path will be the same as the source path.
     * @param options Options for copySync
     * @return a self reference, suitable for chaining
     */
    DeploymentBuilder.prototype.addJSAsset = function (src, dest, options) {
        dest = dest || path_1.relative(process.cwd(), src);
        this.copySync(src, path_1.join(this.jsDir, dest), options);
        return this;
    };
    /**
     * Copies a file or directory into .xdn/src
     * @param src
     */
    DeploymentBuilder.prototype.addSource = function (src) {
        var dest = path_1.relative(this.appDir, src);
        this.copySync(src, path_1.join(this.sourcesDir, dest));
    };
    /**
     * Adds source files to the bundle based on:
     *
     *  - The `sources` property of xdn.config.js, or, if not present
     *  - All files committed to git.
     *
     * If sources is not present in xdn.config.js, and the project does not use git, an error will be thrown.
     */
    DeploymentBuilder.prototype.addSources = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, file, e_1_1;
            var e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        process.stdout.write('> Copying sources into bundle... ');
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 6, 7, 8]);
                        return [4 /*yield*/, listSources_1.default(this.appDir, config_1.default.get('sources', null))];
                    case 2:
                        _a = __values.apply(void 0, [_d.sent()]), _b = _a.next();
                        _d.label = 3;
                    case 3:
                        if (!!_b.done) return [3 /*break*/, 5];
                        file = _b.value;
                        this.addSource(file);
                        _d.label = 4;
                    case 4:
                        _b = _a.next();
                        return [3 /*break*/, 3];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8:
                        process.stdout.write('done.\n');
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Adds the prod entry point from the connector attribute in xdn.config.js
     * @return a self reference, suitable for chaining
     */
    DeploymentBuilder.prototype.addProdEntrypoint = function () {
        var connector = config_1.default.get('connector', 
        /* set by @xdn/cli/build when falling back to framework detection */
        process.env.XDN_CONNECTOR || null);
        if (connector) {
            var prod = void 0;
            if (connector.startsWith('.')) {
                // relative path
                prod = path_1.join(this.appDir, connector, 'prod.js');
            }
            else {
                // package name
                prod = path_1.join(resolveInPackage_1.default(connector, 'prod.js'));
            }
            if (fs_extra_1.existsSync(prod)) {
                this.addJSAsset(prod, paths_2.pathForBackend(constants_1.BACKENDS.js));
            }
        }
        return this;
    };
    /**
     * Adds a folder or file as static asset.
     * Also register directories as asset aliases when they contains an index.html file
     *
     * @param src The source path
     * @param dest An optional destination path in s3. If not provided, the destination path will be the same as the source path.
     * @return a self reference, suitable for chaining
     */
    DeploymentBuilder.prototype.addStaticAsset = function (src, dest, _a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a, _c = _b.permanent, permanent = _c === void 0 ? false : _c, _d = _b.exclude, exclude = _d === void 0 ? [] : _d;
        dest = dest || path_1.relative(process.cwd(), src);
        permanent = permanent && process.env.XDN_DISABLE_PERMANENT_ASSETS !== 'true';
        var staticAssetDir = permanent ? this.permanentStaticAssetsDir : this.staticAssetsDir;
        var absoluteDest = path_1.join(staticAssetDir, dest);
        this.copySync(src, absoluteDest, {
            filter: function (file) { return !some_1.default(exclude, function (excludedFile) { return file.indexOf(excludedFile) >= 0; }); },
        });
        if (fs_extra_1.existsSync(src) && fs_extra_1.lstatSync(src).isDirectory()) {
            // 'index.html' is not defined in constants, because it could very well become a parameter soon
            globby_1.default.sync(path_1.join(absoluteDest, '**', 'index.html')).forEach(function (indexFile) {
                var indexParentDirectory = path_1.dirname(indexFile);
                var relativeIndexFile = path_1.relative(staticAssetDir, indexFile);
                var relativeDirectory = path_1.relative(staticAssetDir, indexParentDirectory);
                _this.assetAliases[relativeDirectory] = relativeIndexFile;
            });
        }
        return this;
    };
    /**
     * Ensures all assets in the "all", "js", and "ts" subdirectories of `defaultAppPath` are either already
     * present in the user's app or are copied over from `defaultAppPath`.
     * @param defaultAppPath
     * @return A self reference, suitable for chaining
     */
    DeploymentBuilder.prototype.addDefaultAppResources = function (defaultAppPath) {
        var _this = this;
        var addResources = function (fromPath) {
            var e_2, _a;
            try {
                for (var _b = __values(globby_1.default.sync('**/*', {
                    cwd: fromPath,
                })), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var file = _c.value;
                    if (!fs_extra_1.existsSync(path_1.join(_this.appDir, file))) {
                        console.log("> " + chalk_1.default.green(file) + " not found, creating...");
                        _this.copySync(path_1.join(fromPath, file), path_1.join(_this.appDir, file));
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        };
        addResources(path_1.join(defaultAppPath, 'all'));
        if (fs_extra_1.existsSync(path_1.join(process.cwd(), 'tsconfig.json'))) {
            addResources(path_1.join(defaultAppPath, 'ts'));
        }
        else {
            addResources(path_1.join(defaultAppPath, 'js'));
        }
        return this;
    };
    /**
     * Copies all the xdn scripts into the package.json file, if they don't already exist.
     * @param {object} scriptsOverride Used to pass framework-specific script overrides
     * @return A self reference, suitable for chaining
     */
    DeploymentBuilder.prototype.addDefaultXdnScripts = function (scriptsOverride, overrideExisting) {
        if (scriptsOverride === void 0) { scriptsOverride = {}; }
        if (overrideExisting === void 0) { overrideExisting = false; }
        init_1.addToPackageJson({
            scripts: __assign({ xdn: 'xdn', 'xdn:dev': 'xdn dev', 'xdn:build': 'xdn build', 'xdn:deploy': 'xdn deploy' }, scriptsOverride),
        }, overrideExisting);
        console.log('');
        console.log('Added the following scripts:');
        console.log('');
        console.log(chalk_1.default.cyan('xdn') + " - Run xdn commands using the local version of the XDN CLI.");
        console.log(chalk_1.default.cyan('xdn:dev') + " - Simulate your app on the XDN locally.");
        console.log(chalk_1.default.cyan('xdn:build') + " - Build your app for deployment on the XDN.");
        console.log(chalk_1.default.cyan('xdn:deploy') + " - Build and deploy your app on the XDN.");
        return this;
    };
    /**
     * Copies a file
     * @param from the source path
     * @param to the destination path
     */
    DeploymentBuilder.prototype.copySync = function (from, to, copySyncOptions) {
        if (copySyncOptions === void 0) { copySyncOptions = {}; }
        if (fs_extra_1.existsSync(from)) {
            this.log("COPY: " + from.replace(this.appDir + '/', '') + " -> " + to.replace(this.appDir + '/', ''));
            return fs_extra_1.copySync(from, to, copySyncOptions);
        }
        else {
            console.warn(chalk_1.default.yellow('Warning:') + " The following file/directory path referenced in your XDN router configuration does not exist: " + path_1.relative(process.cwd(), from) + ". Requests matching this route will return a 404 status.");
        }
    };
    /**
     * Writes a file
     * @param to the destination path
     * @param content the contents of the file
     * @param encoding the encoding
     */
    DeploymentBuilder.prototype.writeFileSync = function (to, content, encoding) {
        if (encoding === void 0) { encoding = 'utf8'; }
        this.log("WRITE: " + to.replace(this.appDir + '/', '') + " (" + encoding + ")");
        fs_extra_1.mkdirpSync(path_1.dirname(to));
        return fs_extra_1.writeFileSync(to, content, encoding);
    };
    /**
     * Deletes all files in a directory
     * @param dir The directory to empty
     */
    DeploymentBuilder.prototype.emptyDirSync = function (dir) {
        this.log("EMPTY: " + dir.replace(this.appDir + '/', ''));
        return fs_extra_1.emptyDirSync(dir);
    };
    /**
     * Reads a file
     * @param path the file path
     * @param options Options for `fs.readFileSync`
     * @returns The file contents
     */
    DeploymentBuilder.prototype.readFileSync = function (path, _a) {
        var _b = (_a === void 0 ? {} : _a).encoding, encoding = _b === void 0 ? 'utf8' : _b;
        this.log("READ: " + path.replace(this.appDir + '/', ''));
        return fs_extra_1.readFileSync(path, { encoding: encoding });
    };
    /**
     * Deletes a file
     * @param path The file to delete
     */
    DeploymentBuilder.prototype.removeSync = function (path) {
        this.log("DELETE: " + path.replace(this.appDir + '/', ''));
        return fs_extra_1.removeSync(path);
    };
    /**
     * Deletes the output of the previous build.
     */
    DeploymentBuilder.prototype.clearPreviousBuildOutput = function () {
        // clear .xdn directory
        this.emptyDirSync(this.xdnDir);
        return this;
    };
    /**
     * Returns the router instance.
     * @return {Router}
     */
    DeploymentBuilder.prototype.getRouter = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cwd;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // this is needed for RouteGroup#dir to find source files to add to the manifest
                        source_1.setSourceDir(process.cwd());
                        if (!!this.router) return [3 /*break*/, 2];
                        return [4 /*yield*/, bundle_1.default()];
                    case 1:
                        _a.sent();
                        cwd = process.cwd();
                        try {
                            process.chdir(this.jsDir);
                            this.router = loadRouter_1.default(bundle_1.ROUTER_DESTINATION);
                        }
                        finally {
                            process.chdir(cwd);
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/, this.router];
                }
            });
        });
    };
    Object.defineProperty(DeploymentBuilder, "xdnVersion", {
        /**
         * XDN version of @xdn/core.
         * @type {String}
         */
        get: function () {
            return (process.env[constants_1.XDN_ENV_VARIABLES.versionOverride] ||
                require('../package.json').version.replace(/\+.*/, '')); // remove the suffix added by yalc so that the last deployed lamba is used when testing an unreleased version of XDN core
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Copies all of the standard assets into the JS and static asset bundles.  These are the same for any framework.
     */
    DeploymentBuilder.prototype.build = function () {
        return __awaiter(this, void 0, void 0, function () {
            var router, edgeConfig, destination, routes;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.includeFiles()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.includeNodeModules()
                            // routes.js and xdn.config.js
                        ];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.getRouter()
                            // Add the prod entry point from the connector attribute in xdn.config.js
                        ];
                    case 3:
                        router = _a.sent();
                        // Add the prod entry point from the connector attribute in xdn.config.js
                        this.addProdEntrypoint();
                        // lambda handler
                        this.addJSAsset(path_1.join(__dirname, '..', 'lambda', 'handler.js'), 'handler.js');
                        // store the router source so we can show it in console and download for debugging purposes
                        this.addSource(path_1.join(this.appDir, config_1.default.get('routes')));
                        // add xdn.config.js to src
                        this.addSource(path_1.join(this.appDir, constants_1.XDN_CONFIG_FILE));
                        if (!(process.env.XDN_INCLUDE_SOURCES === 'true')) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.addSources()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        // s3
                        process.env.XDN_EDGE_BUILD = 'true';
                        return [4 /*yield*/, router.createEdgeConfig()
                            // Copy all serveStatic assets to S3
                        ];
                    case 6:
                        edgeConfig = _a.sent();
                        // Copy all serveStatic assets to S3
                        for (destination in edgeConfig.destinations) {
                            routes = edgeConfig.destinations[destination].routes;
                            routes
                                .filter(function (r) {
                                return r.route &&
                                    r.route.action === constants_1.ACTIONS.proxy &&
                                    // @ts-ignore - not happy with r.route potentially undefined here
                                    [constants_1.BACKENDS.static, constants_1.BACKENDS.permanentStatic].includes(r.route.backend);
                            })
                                .forEach(function (r) {
                                var _a, _b;
                                (_b = (_a = r.route) === null || _a === void 0 ? void 0 : _a.fsPath) === null || _b === void 0 ? void 0 : _b.forEach(function (fsPath) {
                                    // @ts-ignore - not happy with r.route potentially undefined here
                                    var _a = r.route, exclude = _a.fsExclude, backend = _a.backend;
                                    var permanent = backend === constants_1.BACKENDS.permanentStatic;
                                    // File or directory to serve as assets
                                    var relativePath = routeToFiles_1.rootDirForPath(fsPath);
                                    _this.addStaticAsset(path_1.join(_this.appDir, relativePath), relativePath, {
                                        permanent: permanent,
                                        exclude: exclude,
                                    });
                                });
                            });
                        }
                        // .xdn/XDN_VERSION
                        this.writeFileSync(path_1.join(this.xdnDir, 'XDN_VERSION'), DeploymentBuilder.xdnVersion, 'utf8');
                        // xdn.json is not actually used by anything - we just include it here to make it easier to debug the edge logic so we have easy access to it during development.
                        this.writeFileSync(path_1.join(this.xdnDir, 'xdn.json'), JSON.stringify(edgeConfig, null, '  '), 'utf8');
                        if (!isEmpty_1.default(this.assetAliases)) {
                            process.stdout.write('> Writing static assets aliases... ');
                            this.writeFileSync(path_1.join(this.xdnDir, constants_1.XDN_ASSET_ALIASES_FILE), JSON.stringify(this.assetAliases, null, '  '), 'utf8');
                            process.stdout.write('done.\n');
                        }
                        process.stdout.write('> Writing static asset manifest... ');
                        this.writeStaticAssetManifest(router);
                        this.writeStaticAssetExpiration();
                        // needed for static asset expiration
                        this.addJSAsset(path_1.join(this.xdnDir, 'static-asset-expiration.json'));
                        process.stdout.write('done.\n');
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Adds all configured extra files to the lamdba directory
     */
    DeploymentBuilder.prototype.includeFiles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var globs, _a, _b, _i, key, relativeDest, files, files_1, files_1_1, src, dest, e_3_1;
            var e_3, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!config_1.default.has('includeFiles')) return [3 /*break*/, 11];
                        process.stdout.write('> Copying includeFiles into the bundle... ');
                        globs = config_1.default.get('includeFiles', {});
                        _a = [];
                        for (_b in globs)
                            _a.push(_b);
                        _i = 0;
                        _d.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 10];
                        key = _a[_i];
                        relativeDest = globs[key];
                        if (!relativeDest) return [3 /*break*/, 9];
                        files = globby_1.default.sync(path_1.join(this.appDir, key));
                        _d.label = 2;
                    case 2:
                        _d.trys.push([2, 7, 8, 9]);
                        files_1 = (e_3 = void 0, __values(files)), files_1_1 = files_1.next();
                        _d.label = 3;
                    case 3:
                        if (!!files_1_1.done) return [3 /*break*/, 6];
                        src = files_1_1.value;
                        dest = relativeDest === true ? path_1.relative(this.appDir, src) : relativeDest;
                        return [4 /*yield*/, this.copySync(src, path_1.join(this.jsDir, dest))];
                    case 4:
                        _d.sent();
                        _d.label = 5;
                    case 5:
                        files_1_1 = files_1.next();
                        return [3 /*break*/, 3];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_3_1 = _d.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (files_1_1 && !files_1_1.done && (_c = files_1.return)) _c.call(files_1);
                        }
                        finally { if (e_3) throw e_3.error; }
                        return [7 /*endfinally*/];
                    case 9:
                        _i++;
                        return [3 /*break*/, 1];
                    case 10:
                        process.stdout.write('done.\n');
                        _d.label = 11;
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    DeploymentBuilder.prototype.isYarn = function () {
        return fs_extra_1.existsSync(path_1.join(process.cwd(), 'yarn.lock'));
    };
    /**
     * Adds all dependencies from package.json to the JS bundle (excluding devDependencies)
     */
    DeploymentBuilder.prototype.includeNodeModules = function () {
        return __awaiter(this, void 0, void 0, function () {
            var args, yalc, cmd, lockFile;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(config_1.default.get('includeNodeModules', false) === true)) return [3 /*break*/, 2];
                        args = [];
                        yalc = process.env.YALC === 'true';
                        cmd = 'npm' // default to npm
                        ;
                        lockFile = void 0;
                        // yarn
                        if (this.isYarn()) {
                            lockFile = 'yarn.lock';
                            cmd = 'yarn';
                            if (!yalc) {
                                args.push('install', '--frozen-lockfile');
                            }
                        }
                        else if (fs_extra_1.existsSync(path_1.join(process.cwd(), 'package-lock.json'))) {
                            lockFile = 'package-lock.json';
                            args.push(yalc ? 'install' : 'ci');
                        }
                        else {
                            args.push('install');
                        }
                        args.push('--production');
                        process.stdout.write('> Adding production dependencies to the bundle... ');
                        this.preparePackageJson();
                        if (lockFile && !yalc) {
                            this.copySync(path_1.join(this.appDir, lockFile), path_1.join(this.jsDir, lockFile));
                        }
                        return [4 /*yield*/, this.exec(cmd + " " + args.join(' '), { cwd: this.jsDir })];
                    case 1:
                        _a.sent();
                        process.stdout.write('done.\n');
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Copies the package.json file into the lambda and adjust all dependencies that
     * use file paths
     */
    DeploymentBuilder.prototype.preparePackageJson = function () {
        var dest = path_1.join(this.jsDir, 'package.json');
        this.copySync(path_1.join(this.appDir, 'package.json'), dest);
        var contents = JSON.parse(fs_extra_1.readFileSync(dest, 'utf8'));
        var dependencies = contents.dependencies;
        if (dependencies) {
            for (var name_1 in dependencies) {
                var value = dependencies[name_1];
                if (value.startsWith('file:')) {
                    // convert file:./path/to/module to file:../../path/to/module
                    var newValue = value.replace(/file:/, "file:.." + path_1.sep + ".." + path_1.sep);
                    this.log("Rewriting " + name_1 + ": " + value + " => " + newValue);
                    dependencies[name_1] = newValue;
                }
            }
        }
        delete contents.devDependencies;
        fs_extra_1.writeFileSync(dest, JSON.stringify(contents, null, '  '), 'utf8');
    };
    /**
     * Configures the TTL for a static asset. Once the TTL has expired, it will be refreshed
     * by forwarding requests for that asset to serverless.
     * @param path The path to the asset within the app
     * @param maxAgeSeconds The TTL in seconds
     * @return A self-reference, suitable for chaining
     */
    DeploymentBuilder.prototype.setStaticAssetExpiration = function (path, maxAgeSeconds, staleWhileRevalidateSeconds) {
        this.assetExpiration[path] = {
            maxAgeSeconds: maxAgeSeconds,
            staleWhileRevalidateSeconds: staleWhileRevalidateSeconds,
        };
        return this;
    };
    /**
     * Write the manifest for that tells us what static asset routes to configure in the cloud
     * @param router
     */
    DeploymentBuilder.prototype.writeStaticAssetManifest = function (router) {
        this.writeFileSync(path_1.join(this.jsDir, RouteGroup_1.STATIC_ASSET_MANIFEST_FILE), JSON.stringify(router.getStaticAssetManifest(), null, '  '), 'utf8');
    };
    /**
     * Writes static asset expiration times so that we can configure them on S3
     */
    DeploymentBuilder.prototype.writeStaticAssetExpiration = function () {
        this.writeFileSync(path_1.join(this.xdnDir, 'static-asset-expiration.json'), JSON.stringify(this.assetExpiration), 'utf8');
    };
    return DeploymentBuilder;
}());
exports.default = DeploymentBuilder;
