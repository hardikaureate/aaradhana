"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var get_1 = __importDefault(require("lodash/get"));
var has_1 = __importDefault(require("lodash/has"));
var merge_1 = __importDefault(require("lodash/merge"));
var fs_1 = require("fs");
var path_1 = require("path");
var constants_1 = require("./constants");
var Validator_1 = __importDefault(require("./utils/Validator"));
var nonWebpackRequire_1 = __importDefault(require("./utils/nonWebpackRequire"));
/**
 * An object containing the config settings. This class is internal, but an instance
 * can be obtained using.
 *
 * ```js
 * import config from '@xdn/core/config'
 * ```
 *
 * @internal
 */
var Config = /** @class */ (function () {
    function Config() {
        this.defaults = {
            production: true,
            backends: {},
            includeNodeModules: false,
            routes: ['routes.js', 'routes.ts'].find(function (file) { return fs_1.existsSync(path_1.join(process.cwd(), file)); }) || 'routes.js',
        };
    }
    /**
     * Get configuration by key. Will throw an error if no value is configured
     * @param key The key to grab from the config.
     * @param fallback A value to return if a value is not configured
     */
    Config.prototype.get = function (key, fallback) {
        if (this.has(key)) {
            return get_1.default(this.values, key);
        }
        else if (typeof fallback !== 'undefined') {
            return fallback;
        }
        else {
            throw new Error("XDN configuration key: \"" + key + "\" is not defined");
        }
    };
    /**
     * Returns true if a value has been configured for a specific key, otherwise false.
     * @param key The key to test.
     */
    Config.prototype.has = function (key) {
        if (!this.values)
            this.loadXdnConfig();
        return has_1.default(this.values, key);
    };
    Object.defineProperty(Config.prototype, "all", {
        /**
         * Returns all config values
         */
        get: function () {
            if (!this.values)
                this.loadXdnConfig();
            return this.values;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Loads XDN config and sets the current configuration.
     */
    Config.prototype.loadXdnConfig = function () {
        var file = this.loadFromFile();
        var env = this.loadFromEnv();
        this.values = merge_1.default({}, this.defaults, file, env);
    };
    /**
     * Load configuration from file
     * @private
     */
    Config.prototype.loadFromFile = function () {
        var configAbsPath = path_1.join(process.cwd(), constants_1.XDN_CONFIG_FILE);
        if (fs_1.existsSync(configAbsPath)) {
            try {
                var fileConfig = nonWebpackRequire_1.default(configAbsPath);
                return Validator_1.default.validateXdnFileConfiguration(fileConfig);
            }
            catch (e) {
                throw new Error("Failed to load " + configAbsPath + ": " + e.message);
            }
        }
        return {};
    };
    /**
     * Load configuration from env var
     * @private
     */
    Config.prototype.loadFromEnv = function () {
        if (process.env[constants_1.XDN_ENV_VARIABLES.config]) {
            try {
                return JSON.parse(process.env[constants_1.XDN_ENV_VARIABLES.config]);
            }
            catch (e) {
                throw new Error("XDN configuration variable: " + constants_1.XDN_ENV_VARIABLES.config + ", is not parsable as json");
            }
        }
        return {};
    };
    return Config;
}());
/**
 * Create a Config instance.
 */
exports.default = new Config();
