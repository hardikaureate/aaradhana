"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var BaseResponseWriter_1 = require("./BaseResponseWriter");
var CacheManifest_1 = __importDefault(require("./CacheManifest"));
var mapValues_1 = __importDefault(require("lodash/mapValues"));
/**
 * Generates a new `CacheManifest` object from the rules given in the provided `Router`
 */
function cacheManifestFromRouter(router) {
    var e_1, _a;
    var manifest = new CacheManifest_1.default();
    var propToString = function (regexOrString) {
        if (regexOrString === undefined)
            return undefined;
        return regexOrString instanceof RegExp ? regexOrString.source : regexOrString;
    };
    try {
        for (var _b = __values(router.routeGroups.getRoutes()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var route = _c.value;
            var writer = new StubWriter();
            // @ts-ignore Typescript doesn't like that we're passing in the base class here -
            // but we keep ResponseWriter on the handler method for documentation purposes
            route.handler(writer);
            var entry = {
                criteriaPath: route.criteria.path,
                route: route.toRegexString(),
                method: propToString(route.criteria.method),
                protocol: propToString(route.criteria.protocol),
                cacheOptions: writer.cacheOptions,
                returnsResponse: writer.returnsResponse,
            };
            if (route.criteria.query) {
                // @ts-ignore The lodash response is a Dictionary which confuses TS
                entry.query = mapValues_1.default(route.criteria.query, function (value) {
                    return value ? value.source : null;
                });
            }
            // Because service worker cannot match on headers and cookies we ignore them
            // during the creation of cache manifest. This is problematic but it's
            // less problematic than pretending to not ignore them and creating
            // routes that are too "greedy" (they can never match on headers/cookies
            // so overall the condition is always weaker and thus matches more than
            // it should)
            //
            // An example of the issues this causes arises when users try to block some
            // traffic in the router (e.g. from certain countries) The blocking is
            // based on the geo location headers that are injected into the request
            // by the edge so aren't even theoretically available for evaluation
            // in the browser. This leads to service worker matching *all* requests
            // to something that has no caching options (it only has the blocking code)
            // leading to service worker rejecting to cache anything, contrary to what
            // the rest of the router states.
            if (route.criteria.headers || route.criteria.cookies) {
                continue;
            }
            manifest.entries.push(entry);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return manifest;
}
exports.default = cacheManifestFromRouter;
/**
 * Helper class used to generate manifest entries from a Router
 * @private
 */
var StubWriter = /** @class */ (function (_super) {
    __extends(StubWriter, _super);
    function StubWriter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.response = {};
        _this.cacheOptions = {};
        _this.returnsResponse = false;
        _this.doesReturnResponse = function () { return (_this.returnsResponse = true); };
        _this.cache = function (options) {
            _this.cacheOptions = options;
        };
        _this.send = _this.doesReturnResponse;
        _this.compute = _this.doesReturnResponse;
        _this.proxy = _this.doesReturnResponse;
        _this.redirect = _this.doesReturnResponse;
        _this.render = _this.doesReturnResponse;
        _this.serveStatic = _this.doesReturnResponse;
        _this.serviceWorker = _this.doesReturnResponse;
        _this.renderWithApp = _this.doesReturnResponse;
        _this.appShell = _this.doesReturnResponse;
        _this.stream = _this.doesReturnResponse;
        return _this;
    }
    return StubWriter;
}(BaseResponseWriter_1.BaseResponseWriter));
