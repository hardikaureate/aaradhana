"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = __importDefault(require("../config"));
var Tasks_1 = __importDefault(require("../utils/Tasks"));
var PreloadRequests = /** @class */ (function () {
    function PreloadRequests() {
        this.options = [];
    }
    /**
     * Adds prerender config to list
     *
     * @param preloadConfig
     */
    PreloadRequests.prototype.push = function () {
        var _a;
        var preloadConfig = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            preloadConfig[_i] = arguments[_i];
        }
        (_a = this.options).push.apply(_a, __spread(preloadConfig));
    };
    /**
     * Resolves Preload config per destination
     * @param router
     * @private
     */
    PreloadRequests.resolveDestinationPreloadConfig = function (router, destination) {
        return __awaiter(this, void 0, void 0, function () {
            var requests;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        requests = [];
                        return [4 /*yield*/, (_a = new Tasks_1.default()).add.apply(_a, __spread(router.preloadRequests.options)).onTaskDone(function (result) {
                                requests.push.apply(requests, __spread(result.map(function (r) { return (__assign(__assign({}, r), { destination: destination })); })));
                            })
                                .resolve()];
                    case 1:
                        _b.sent();
                        return [2 /*return*/, {
                                requests: requests,
                            }];
                }
            });
        });
    };
    /**
     * Resolves compiled Preload config across all destinatons
     * @param router
     * @private
     */
    PreloadRequests.resolvePreloadConfig = function (router) {
        return __awaiter(this, void 0, void 0, function () {
            var preloadRequests, tasks, d;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        preloadRequests = [];
                        tasks = new Tasks_1.default();
                        // Compile all the requests and options across all destinations
                        if (!Object.keys(router.getDestinations()).length) {
                            tasks.add(PreloadRequests.resolveDestinationPreloadConfig(router, 'default'));
                        }
                        else {
                            for (d in router.getDestinations()) {
                                tasks.add(PreloadRequests.resolveDestinationPreloadConfig(router.getDestinations()[d], d));
                            }
                        }
                        return [4 /*yield*/, tasks
                                .onTaskDone(function (_a) {
                                var requests = _a.requests;
                                preloadRequests.push.apply(preloadRequests, __spread(requests));
                            })
                                .resolve()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, {
                                requests: preloadRequests,
                                concurrency: config_1.default.get('prerenderConcurrency', null),
                            }];
                }
            });
        });
    };
    return PreloadRequests;
}());
exports.default = PreloadRequests;
