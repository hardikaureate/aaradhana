"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var path_1 = require("path");
var bindParamsToPath_1 = __importDefault(require("../utils/bindParamsToPath"));
var config_1 = __importDefault(require("../config"));
var Backend_1 = __importDefault(require("./Backend"));
var interpolateParams_1 = __importDefault(require("./interpolateParams"));
var isString_1 = __importDefault(require("lodash/isString"));
var defaultTo_1 = __importDefault(require("lodash/defaultTo"));
var some_1 = __importDefault(require("lodash/some"));
var stream_1 = __importDefault(require("./stream"));
var constants_1 = require("../constants");
var environment_1 = require("../environment");
var validateWriter_1 = require("./validateWriter");
var Route_1 = __importDefault(require("./Route"));
var unzip_1 = __importDefault(require("../utils/unzip"));
var Cache_1 = require("../cache/Cache");
var CacheKey_1 = __importDefault(require("../cache/CacheKey"));
var timing_1 = require("../timing");
var PathMatcher_1 = __importDefault(require("./PathMatcher"));
var nonWebpackRequire_1 = __importDefault(require("../utils/nonWebpackRequire"));
var logo_1 = require("../utils/logo");
var BaseResponseWriter_1 = require("./BaseResponseWriter");
var cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
var mergeQueryString_1 = __importDefault(require("./mergeQueryString"));
/**
 * The API that is provided to route callbacks.
 */
var ResponseWriter = /** @class */ (function (_super) {
    __extends(ResponseWriter, _super);
    /**
     * @param req The request
     * @param res The response
     * @param route The route
     * @param defaultBackend The default backend for proxy when none is provided
     */
    function ResponseWriter(req, res, route, context) {
        var _this = _super.call(this, req, res, route) || this;
        _this.params = {}; // Merged/All params
        _this.streaming = false;
        // request/response phases
        _this.preCacheRequestActions = [];
        _this.postCacheRequestActions = [];
        _this.preCacheResponseActions = [];
        _this.postCacheResponseActions = [];
        /**
         * Helper function to simplify calling interpolateParams()
         */
        _this.interpolateParams = function (value) {
            return interpolateParams_1.default(_this.request, _this.response, value);
        };
        /**
         * Redirects the browser to a new location.
         * Query params from the original request are added to the redirect URL
         *
         * **Examples**
         *
         * ```
         *  new Router()
         *    .get('/p/:productId', ({ redirect }) => {
         *      return redirect('/products/:productId', { statusCode: 301 })
         *    })
         *
         *  // Extract id from route and apply as query string
         *  new Router()
         *    .get('/p/:productId', ({ redirect }) => {
         *      return redirect('/product', { query: { id: ':productId' }})
         *    })
         *
         *  // Extract id from query string and apply to route
         *  new Router()
         *    .get({ path: '/p', query: { id: ':id' } }, ({ redirect }) => {
         *      return redirect('/product/:id')
         *    })
         * ```
         *
         * @param to The URL to which the browser will be redirected.
         * @param options
         * @param options.statusCode The HTTP status to return.  Defaults to 301
         * @param options.query Key-value object of query strings to be added to the redirect url
         */
        _this.redirect = function (to, options) {
            if (options === void 0) { options = {}; }
            var _a = _this._readRedirectParams(to, options), toPath = _a.to, statusCode = _a.statusCode, query = _a.query;
            var redirectLocation = mergeQueryString_1.default(_this.request.url, bindParamsToPath_1.default(Route_1.default.pathWithQueryString(toPath, query), _this.request.params));
            _this.setResponseHeader(constants_1.HTTP_HEADERS.location, redirectLocation);
            _this.send('', statusCode);
        };
        /**
         * Relays the request to the specified backend.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path/with/:variable', ({ proxy }) => {
         *      proxy('legacy', { path: '/some/other/path/with/:variable' })
         *    })
         * ```
         *
         * In this example, we relay the request to the "legacy" backend. In this case, `xdn.config.js` must
         * contain a definition for the `legacy` backend.  For example:
         *
         * ```
         *  // xdn.config.js
         *
         *  module.exports = {
         *    backends: {
         *      legacy: {
         *        domainOrIp: 'legacy.domain.com',
         *        hostHeader: 'domain.com'
         *      }
         *    }
         *  }
         * ```
         *
         * @param backend The name of one of the backends in your `xdn.config.js` file.
         * @param options
         * @returns A promise the resolves once the response has been fetched from the upstream site.
         */
        _this.proxy = function (backend, options) { return __awaiter(_this, void 0, void 0, function () {
            var backendConfig;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        backendConfig = config_1.default.get("backends." + backend);
                        return [4 /*yield*/, this.proxyHost(backendConfig, options)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        /**
         * Calls the provided callback to send a response.
         * @param cb Render callback function
         * @deprecated
         */
        _this.render = function (cb) {
            console.warn(logo_1.warnLogLabel + " Warning ResponseWriter#render is deprecated.");
            cb(_this.request, _this.proxy, _this.request.params);
        };
        /**
         * Renders a result in the XDN's serverless cloud using your application.
         */
        _this.renderWithApp = function () { return _this.proxy(constants_1.BACKENDS.js); };
        /**
         * Streams the result from a backend.  Can only be used in development for things
         * like hot-module reloading.
         * @param backend The name of the backend to connect to
         * @private
         */
        _this.stream = function (backend) {
            if (process.env.NODE_ENV === 'production') {
                throw new Error('stream can only be used in development');
            }
            var backendConfig = normalizeBackendConfig(config_1.default.get("backends." + backend));
            _this.response.setHeader(constants_1.HTTP_HEADERS.contentType, 'text/event-stream');
            _this.streaming = true;
            stream_1.default(_this.request, _this.response, backendConfig, Function.prototype);
            _this.setCreateResponseAction(function () { return Promise.resolve(); }); // to prevent the router from continuing on to the next route
        };
        /**
         * Proxies the response from a given host
         * @private
         * @param backendConfig The backend config
         * @param options
         */
        _this.proxyHost = function (backendConfig, _a) {
            var _b = _a === void 0 ? {} : _a, path = _b.path, transformRequest = _b.transformRequest, transformResponse = _b.transformResponse, headers = _b.headers;
            return __awaiter(_this, void 0, void 0, function () {
                var backend, pathString;
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            backendConfig = normalizeBackendConfig(backendConfig);
                            backend = new Backend_1.default(backendConfig);
                            if (typeof path === 'function') {
                                pathString = path();
                            }
                            else {
                                pathString = path;
                            }
                            pathString = pathString ? bindParamsToPath_1.default(pathString, this.request.params) : pathString;
                            return [4 /*yield*/, this.setCreateResponseAction(function () { return __awaiter(_this, void 0, void 0, function () {
                                    var transformRequestTime, fetchTime, transformResponseTime, e_1;
                                    var _this = this;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                _a.trys.push([0, 13, , 14]);
                                                if (!transformRequest) return [3 /*break*/, 4];
                                                transformRequestTime = new timing_1.InternalTiming(timing_1.InternalNames.transformRequest).start();
                                                _a.label = 1;
                                            case 1:
                                                _a.trys.push([1, , 3, 4]);
                                                return [4 /*yield*/, this.runImmediately(function () { return transformRequest(_this.request); })];
                                            case 2:
                                                _a.sent();
                                                return [3 /*break*/, 4];
                                            case 3:
                                                transformRequestTime.end();
                                                return [7 /*endfinally*/];
                                            case 4:
                                                fetchTime = new timing_1.InternalTiming(timing_1.InternalNames.proxying).start();
                                                _a.label = 5;
                                            case 5:
                                                _a.trys.push([5, , 7, 8]);
                                                return [4 /*yield*/, backend.fetch(this.request, this.response, {
                                                        path: pathString || this.request.url,
                                                        disableCheckCert: backendConfig.disableCheckCert,
                                                        headers: headers,
                                                    })];
                                            case 6:
                                                _a.sent();
                                                return [3 /*break*/, 8];
                                            case 7:
                                                fetchTime.end();
                                                return [7 /*endfinally*/];
                                            case 8:
                                                if (!transformResponse) return [3 /*break*/, 12];
                                                transformResponseTime = new timing_1.InternalTiming(timing_1.InternalNames.transformResponse).start();
                                                _a.label = 9;
                                            case 9:
                                                _a.trys.push([9, , 11, 12]);
                                                unzip_1.default(this.response);
                                                return [4 /*yield*/, this.runImmediately(function () { return transformResponse(_this.response, _this.request); })];
                                            case 10:
                                                _a.sent();
                                                return [3 /*break*/, 12];
                                            case 11:
                                                transformResponseTime.end();
                                                return [7 /*endfinally*/];
                                            case 12: return [3 /*break*/, 14];
                                            case 13:
                                                e_1 = _a.sent();
                                                if (e_1.type === 'BackendFetchError') {
                                                    // will get here when there is a connection error with the backend
                                                    console.error(logo_1.errorLogLabel + " Could not connect to backend " + backendConfig.domainOrIp + ":", e_1.message);
                                                    this.response.statusCode = 503;
                                                }
                                                else {
                                                    console.error(logo_1.errorLogLabel + " Error in ResponseWriter:", e_1);
                                                    this.response.statusCode = 500;
                                                }
                                                return [3 /*break*/, 14];
                                            case 14: return [2 /*return*/];
                                        }
                                    });
                                }); })];
                        case 1:
                            _c.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Rewrites the request path.
         *
         * Example:
         *
         * ```js
         *  router.get('/products/:id', ({ updatePath }) => {
         *    updatePath('/p/:id')
         *  })
         * ```
         *
         * @param destination a new route path, which can include params captured from the original path
         */
        _this.updatePath = function (destination) {
            var path = bindParamsToPath_1.default(destination, _this.request.params);
            // IncomingMessage defines path as only having a getter, so we need to redefine it, we can't just set path = destination, which would result in an error in development.
            Object.defineProperty(_this.request, 'path', {
                get: function () { return path; },
            });
        };
        /**
         * Updates the request's parameters based on a new path and route pattern. This is, in effect,
         * an implementation of Next.js rewrites, put here instead of NextRoutes in anticipation of other frameworks
         * implementing the same spec as many of them "follow the leader".
         *
         * **example**:
         *
         * ```js
         * res.rewrite('/category/boys/:slug*', '/category/:slug*')
         * // result: request.params will be { slug: ['category', 'boys'] }
         * ```
         * @private
         * @param destination A destination path, which may contain path variables.
         * @param pattern The path pattern for the destination route we're emulating
         */
        _this.rewrite = function (destination, pattern) {
            var path = bindParamsToPath_1.default(destination, _this.request.params);
            _this.request.params = new PathMatcher_1.default(pattern).match(path);
        };
        /**
         * Responds with a static asset from the specified path.
         *
         * **Example**
         *
         * ```js
         * serveStatic('path/to/asset/from/app/root')
         * ```
         *
         * You can also use variables in the asset path.  For example, to return files under the `assets` directory
         * when the url starts with `/static`:
         *
         * ```
         *  new Router()
         *    .get('/static/:path*', ({ serveStatic }) => {
         *      serveStatic('assets/:path*')
         *    })
         * ```
         *
         * Notes:
         * - if a folder contains an 'index.html', that page is also served when requesting the parent folder route.
         *   Let's take the example of /posts/1 that will render /posts/1/index.html)
         *   They are multiple components involved in this rewrite to make it work with S3 storage:
         *   1. DeploymentBuilder creates and bundles an assets-aliases.json file, that indicates that
         *     '/posts/1' should point to '/posts/1/index.html' asset file.
         *   2. xdn-subaccount-infra/components/deploy-lambda/src/deploy.js re-uploads '/posts/1/index.html'
         *     as '/posts/1' s3 key, which works because S3 is a key based storage and not a filesystem.
         *     It's a bit of a hack and takes extra space, but allows root document rendering.
         *   3. serveStatic(), both in ResponseWriter ad EdgeResponseWriter, remove any trailing slash on path
         *     so that both '/posts/1/' and '/posts/1' match the '/posts/1' S3 file
         *
         * - We did not use S3 built-in Static Website feature for multiple reasons:
         *   1. It is http only
         *   2. /build-slug/public/posts/ renders /build-slug/public/posts/index.html correctly, but /build-slug/public/posts
         *      without a trailing slash redirects to /build-slug/public/posts/.
         *      While it's easy to rewrite the path and remove trailing slashes, we actually do, it's not easy
         *      to add missing trailing slash as we don't know beforehand if the route is a directory or a file.
         *      Having a redirect on every route is not acceptable either.
         *      The Location header would also need to be rewritten to be relative to the actual website and
         *      not the bucket prefix, but that's manageable.
         *
         * @param path The relative path to the asset from the app's root directory. You can reference path variables using `:variable`.
         * @param options The different options to serving static assets including fallback to compute
         * @returns A promise the resolves once the asset has been fetched from storage.
         */
        _this.serveStatic = function (path, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var filePath, permanent, exclude, staticBackend, stat, mime_1, contentType;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            filePath = path && bindParamsToPath_1.default(path, this.request.params);
                            permanent = options.permanent, exclude = options.exclude;
                            // Remove trailing '/' so that both /path/ and /path are
                            // served by /path file.
                            filePath = filePath.replace(/\/$/, '');
                            if (some_1.default(exclude, function (excludedFile) { return filePath.indexOf(excludedFile) >= 0; })) {
                                return [2 /*return*/, this.send('404 - Not found', 404)];
                            }
                            if (!environment_1.isCloud()) return [3 /*break*/, 2];
                            staticBackend = config_1.default.get("backends." + (permanent ? constants_1.BACKENDS.permanentStatic : constants_1.BACKENDS.static));
                            // AWS
                            // Static assets are stored in s3 in production, so we just need to proxy
                            // s3 for all of the correct headers to be sent and the correct file to be served.
                            return [4 /*yield*/, this.proxyHost(staticBackend, {
                                    path: filePath,
                                    transformResponse: function (res) { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    if (!(res.statusCode === 403)) return [3 /*break*/, 5];
                                                    if (!options.loadingPage) return [3 /*break*/, 2];
                                                    return [4 /*yield*/, this.proxyHost(config_1.default.get("backends." + constants_1.BACKENDS.static), {
                                                            path: bindParamsToPath_1.default(options.loadingPage, this.request.params),
                                                        })];
                                                case 1:
                                                    _a.sent();
                                                    return [3 /*break*/, 5];
                                                case 2:
                                                    if (!options.onNotFound) return [3 /*break*/, 4];
                                                    return [4 /*yield*/, options.onNotFound(this)];
                                                case 3:
                                                    _a.sent();
                                                    return [3 /*break*/, 5];
                                                case 4:
                                                    // We translate the S3 403 into a 404. The edge does the same thing.
                                                    res.statusCode = 404;
                                                    res.statusMessage = 'Not Found';
                                                    _a.label = 5;
                                                case 5:
                                                    // Set the optional status code and message to the static response.
                                                    if (options.statusCode) {
                                                        res.statusCode = options.statusCode;
                                                    }
                                                    if (options.statusMessage) {
                                                        res.statusMessage = options.statusMessage;
                                                    }
                                                    return [2 /*return*/];
                                            }
                                        });
                                    }); },
                                })];
                        case 1:
                            // AWS
                            // Static assets are stored in s3 in production, so we just need to proxy
                            // s3 for all of the correct headers to be sent and the correct file to be served.
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            // local development
                            if (!fs_1.default.existsSync(filePath)) {
                                return [2 /*return*/, this.send('404 - Not found', 404)];
                            }
                            // Try serving root document "($path)/index.html" for paths matching
                            // a directory.
                            // We achieve the same result on S3 via assets-aliases.json.
                            if (fs_1.default.lstatSync(filePath).isDirectory()) {
                                filePath = path_1.join(filePath, './index.html');
                            }
                            stat = fs_1.default.statSync(filePath);
                            mime_1 = nonWebpackRequire_1.default('mime-types');
                            contentType = mime_1.lookup(filePath);
                            /* istanbul ignore else */
                            if (contentType) {
                                this.setResponseHeader(constants_1.HTTP_HEADERS.contentType, contentType);
                            }
                            // We don't allow developers to manipulate content-length header through the router
                            // (it's prohibited on the edge as it could lead to broken responses)
                            // In this case we know we are not running in the cloud so our code is free to do so.
                            this.internalSetResponseHeader(constants_1.HTTP_HEADERS.contentLength, stat.size.toString(), false, this.postCacheResponseActions);
                            if (options.statusCode) {
                                this.response.statusCode = options.statusCode;
                                this.response.statusMessage = options.statusMessage;
                            }
                            this.setCreateResponseAction(function () {
                                return new Promise(function (resolve, reject) {
                                    fs_1.default.readFile(filePath, function (err, data) {
                                        /* istanbul ignore if */
                                        if (err) {
                                            reject(err);
                                        }
                                        else {
                                            _this.response.body = data;
                                            resolve();
                                        }
                                    });
                                });
                            });
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Sets the caching behavior for both browser and edge.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/p/:productId', ({ cache, proxy }) => {
         *      cache({
         *        browser: {
         *          maxAgeSeconds: 0,
         *          serviceWorkerSeconds: 60 * 60, // 1 hour
         *        },
         *        edge: {
         *          maxAgeSeconds: 60 * 60 * 24 // 24 hours
         *          staleWhileRevalidateSeconds: 60 * 60 // 1 hour
         *        }
         *      })
         *      proxy('origin')
         *    })
         * ```
         *
         * The `cache()` method can be called in the same route where the response is sent, or any prior route.  For example,
         * with Next.js, it is common to use the next plugin to automatically inherit page routes based on Next.js conventions,
         * and use the XDN router simply to add caching:
         *
         * ```
         *  import { Router } = from '@xdn/core/router'
         *  import { createNextPlugin } from '@xdn/next'
         *
         *  const { nextMiddleware, renderNext } = createNextPlugin()
         *
         *  new Router()
         *    .get('/p/:productId', ({ cache, proxy }) => {
         *      cache({
         *        browser: {
         *          maxAgeSeconds: 0,
         *          serviceWorkerSeconds: 60 * 60, // 1 hour
         *        },
         *        edge: {
         *          maxAgeSeconds: 60 * 60 * 24 // 24 hours
         *          staleWhileRevalidateSeconds: 60 * 60 // 1 hour
         *        }
         *      })
         *      proxy('origin')
         *    })
         *    .use(nextMiddleware)
         * ```
         */
        _this.cache = function (options) {
            var browser = options.browser, edge = options.edge, key = options.key;
            if (edge) {
                var maxAgeSeconds = edge.maxAgeSeconds, staleWhileRevalidateSeconds = edge.staleWhileRevalidateSeconds, forcePrivateCaching = edge.forcePrivateCaching;
                var value = [];
                // Flip force-private-caching only if it is explicitly set.
                if (typeof forcePrivateCaching !== 'undefined') {
                    _this.context.forcePrivateCaching = forcePrivateCaching === true;
                }
                _this.cacheKey = key;
                if (typeof _this.route.criteria.method === 'string') {
                    _this.context.cacheRouteMethod = _this.route.criteria.method;
                }
                if (maxAgeSeconds) {
                    value.push('max-age=' + maxAgeSeconds);
                    if (staleWhileRevalidateSeconds) {
                        value.push('stale-while-revalidate=' + staleWhileRevalidateSeconds);
                    }
                }
                if (value.length) {
                    _this.internalSetResponseHeader(constants_1.HTTP_HEADERS.xXdnCacheControl, value.join(', '), false, _this.preCacheResponseActions);
                }
            }
            if (browser || browser === false) {
                var _a = browser || { maxAgeSeconds: 0 }, maxAgeSeconds = _a.maxAgeSeconds, serviceWorkerSeconds = _a.serviceWorkerSeconds;
                if (maxAgeSeconds === 0) {
                    _this.setResponseHeader(constants_1.HTTP_HEADERS.cacheControl, 'private, no-store, no-cache');
                }
                else if (maxAgeSeconds) {
                    // Here we use "private" instead of "public" to prevent downstream CDNs from caching the asset
                    // Since we already have an explicit way to cache at edge, we choose to keep browser and edge
                    // caching totally separate.
                    _this.setResponseHeader(constants_1.HTTP_HEADERS.cacheControl, "private, max-age=" + maxAgeSeconds);
                }
                if (serviceWorkerSeconds) {
                    _this.setResponseHeader(constants_1.HTTP_HEADERS.xSwCacheControl, "max-age=" + serviceWorkerSeconds);
                }
            }
        };
        /**
         * Adds or replaces a response header immediately before delivering the response downstream.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ setResponseHeader, proxy }) => {
         *      proxy('origin')
         *      setResponseHeader('some-header', 'some-value')
         *    })
         * ```
         *
         * @param name The case-insensitive name of the response header
         * @param value The value to set
         */
        _this.setResponseHeader = function (name, value) {
            _this.internalSetResponseHeader(name, value, true, _this.postCacheResponseActions);
        };
        _this.internalSetResponseHeader = function (name, value, validate, phase) {
            if (validate) {
                validateWriter_1.validateSetResponseHeader(name);
            }
            _this.scheduleExecution(phase, function () {
                var interpolatedValue = _this.interpolateParams(value);
                _this.response.setHeader(name, interpolatedValue);
            });
        };
        /**
         * Alters a response header immediately before delivering the response downstream.
         * Use this method to derive the new header value from the existing one.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ updateResponseHeader, proxy }) => {
         *      proxy('origin')
         *      updateResponseHeader('some-header', /some-.*-part/gi, 'some-replacement')
         *    })
         * ```
         *
         * @param name The case-insensitive name of the response header
         * @param match Regex to find the part that should be replaced.
         * @param replace Value that will replace the matched part.
         */
        _this.updateResponseHeader = function (name, match, replace) {
            _this.internalUpdateResponseHeader(name, match, replace, _this.preCacheResponseActions);
        };
        _this.internalUpdateResponseHeader = function (name, match, replace, phase) {
            validateWriter_1.validateUpdateResponseHeader(name);
            _this.scheduleExecution(phase, function () {
                var currentValue = _this.response.getHeader(name);
                var interpolatedReplace = _this.interpolateParams(replace);
                if (currentValue) {
                    _this.response.setHeader(name, currentValue.replace(match, interpolatedReplace));
                }
            });
        };
        /**
         * Removes a response header immediately before delivering the response downstream.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ removeResponseHeader, proxy }) => {
         *      proxy('origin')
         *      removeResponseHeader('some-header')
         *    })
         * ```
         * @param name The case-insensitive name of the response header
         */
        _this.removeResponseHeader = function (name) {
            _this.internalRemoveResponseHeader(name, _this.postCacheResponseActions);
        };
        _this.internalRemoveResponseHeader = function (name, phase) {
            validateWriter_1.validateRemoveResponseHeader(name);
            _this.scheduleExecution(phase, function () {
                _this.response.removeHeader(name);
            });
        };
        /**
         * Returns an array of values associated with all `set-cookie` headers.
         */
        _this.getSetCookieValues = function () {
            var headers = _this.response.getHeader(constants_1.HTTP_HEADERS.setCookie);
            if (typeof headers === 'string') {
                return [headers];
            }
            return defaultTo_1.default(headers, []);
        };
        /**
         * Returns action function for the "add response cookie" operation.
         */
        _this.getAddResponseCookieAction = function (name, value) {
            return function () {
                var setCookies = _this.getSetCookieValues();
                var interpolatedValue = _this.interpolateParams(value);
                _this.response.setHeader(constants_1.HTTP_HEADERS.setCookie, __spread(setCookies, [
                    name + "=" + interpolatedValue,
                ]));
            };
        };
        /**
         * Adds a `set-cookie` header to the response before attempting to cache the response.
         * This does not replace any cookies with the same name - for that you should use `updateUpstreamResponseCookie`.
         * Furthermore, XDN does not cache responses with `set-cookie` so if you wish to add a cookie
         * *after* the response is cached, you should use `addResponseCookie`.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ addUpstreamResponseCookie, proxy }) => {
         *      proxy('origin')
         *      addUpstreamResponseCookie('my-cookie', 'my-cookie-value')
         *    })
         * ```
         *
         * @param name Name of the cookie to add.
         * @param value Value to set
         */
        _this.addUpstreamResponseCookie = function (name, value) {
            validateWriter_1.validateCookieName(name);
            _this.scheduleExecution(_this.preCacheResponseActions, _this.getAddResponseCookieAction(name, value));
        };
        /**
         * Adds a `set-cookie` header to the response.
         * This does not replace any cookies with the same name - for that you should use `updateResponseCookie`.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ addUpstreamResponseCookie, proxy }) => {
         *      proxy('origin')
         *      addResponseCookie('my-cookie', 'my-cookie-value')
         *    })
         * ```
         *
         * @param name Name of the cookie to add.
         * @param value Value to set
         */
        _this.addResponseCookie = function (name, value) {
            validateWriter_1.validateCookieName(name);
            _this.scheduleExecution(_this.postCacheResponseActions, _this.getAddResponseCookieAction(name, value));
        };
        /**
         * Returns action function for the "update response cookie" operation.
         *
         * Notes:
         * - Cookie names are case sensitive so we use case sensitive comparison.
         */
        _this.getUpdateResponseCookieAction = function (name, match, replace) {
            return function () {
                var setCookies = _this.getSetCookieValues().map(function (cookie) {
                    var _a = __read(cookie.split('=')), cookieName = _a[0], cookieValues = _a.slice(1);
                    if (cookieName !== name) {
                        return cookie;
                    }
                    var cookieValue = cookieValues.join('=').replace(match, replace);
                    return [cookieName, cookieValue].join('=');
                });
                _this.response.setHeader(constants_1.HTTP_HEADERS.setCookie, setCookies);
            };
        };
        /**
         * Updates a `set-cookie` header in the response before attempting to cache the response.
         * If there are multiple cookies with the same name, all of them will be updated.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ updateUpstreamResponseCookie, proxy }) => {
         *      proxy('origin')
         *      updateUpstreamResponseCookie('my-cookie', /Domain=.+;/, 'Domain=mydomain.com;')
         *    })
         * ```
         *
         * @param name Case-insensitive name of the cookie to update
         * @param match Regex to find the part that should be replaced.
         * @param replace Value that will replace the matched part.
         */
        _this.updateUpstreamResponseCookie = function (name, match, replace) {
            validateWriter_1.validateCookieName(name);
            _this.scheduleExecution(_this.preCacheResponseActions, _this.getUpdateResponseCookieAction(name, match, replace));
        };
        /**
         * Updates a `set-cookie` header in the response. If there are multiple cookies
         * with the same name, all of them will be updated.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ updateUpstreamResponseCookie, proxy }) => {
         *      proxy('origin')
         *      updateUpstreamResponseCookie('my-cookie', /Domain=.+;/, 'Domain=mydomain.com;')
         *    })
         * ```
         *
         * @param name Case-insensitive name of the cookie to update
         * @param match Regex to find the part that should be replaced.
         * @param replace Value that will replace the matched part.
         */
        _this.updateResponseCookie = function (name, match, replace) {
            validateWriter_1.validateCookieName(name);
            _this.scheduleExecution(_this.postCacheResponseActions, _this.getUpdateResponseCookieAction(name, match, replace));
        };
        /**
         * Returns action function for the "remove response cookie" operation.
         *
         * Notes:
         * - Cookie names are case sensitive so we use case sensitive comparison.
         */
        _this.getRemoveResponseCookieAction = function (name) {
            return function () {
                var setCookies = _this.getSetCookieValues().filter(function (cookie) { return cookie.split('=')[0] !== name; });
                _this.response.setHeader(constants_1.HTTP_HEADERS.setCookie, setCookies);
            };
        };
        /**
         * Removes a specific `set-cookie` header from the response before attempting to cache the response.
         * If you wish to remove all such headers use `removeUpstreamHeader`.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ removeUpstreamResponseHeader, proxy }) => {
         *      proxy('origin')
         *      removeUpstreamResponseCookie('my-cookie')
         *    })
         * ```
         * @param name The case-insensitive name of the cookie
         */
        _this.removeUpstreamResponseCookie = function (name) {
            validateWriter_1.validateCookieName(name);
            _this.scheduleExecution(_this.preCacheResponseActions, _this.getRemoveResponseCookieAction(name));
        };
        /**
         * Removes a specific `set-cookie` header from the response.
         * If you wish to remove all such headers use `removeHeader`.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ removeUpstreamResponseHeader, proxy }) => {
         *      proxy('origin')
         *      removeUpstreamResponseCookie('my-cookie')
         *    })
         * ```
         * @param name The case-insensitive name of the cookie
         */
        _this.removeResponseCookie = function (name) {
            validateWriter_1.validateCookieName(name);
            _this.scheduleExecution(_this.postCacheResponseActions, _this.getRemoveResponseCookieAction(name));
        };
        /**
         * Adds or replaces an upstream response header before attempting to cache the response.
         * In local development this is same as calling `setResponseHeader` but on edge it adds
         * a header immediately after the upstream fetch has finished.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ setUpstreamResponseHeader, proxy }) => {
         *      proxy('origin')
         *      setUpstreamResponseHeader('x-xdn-surrogate-key', 'proxy=origin')
         *    })
         * ```
         *
         * @param name The case-insensitive name of the response header
         * @param value The value to set
         */
        _this.setUpstreamResponseHeader = function (name, value) {
            return _this.internalSetResponseHeader(name, value, true, _this.preCacheResponseActions);
        };
        /**
         * Alters an upstream response header before attempting to cache the response.
         * Use this method to derive the new header value from the existing one.
         * In local development this is same as calling `updateResponseHeader` but on
         * edge it updates a header immediately after the upstream fetch has finished.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ updateUpstreamResponseHeader, proxy }) => {
         *      proxy('origin')
         *      updateUpstreamResponseHeader('cache-control', /public/gi, 'private')
         *    })
         * ```
         *
         * @param name The case-insensitive name of the response header
         * @param match Regex to find the part that should be replaced.
         * @param replace Value that will replace the matched part.
         */
        _this.updateUpstreamResponseHeader = function (name, match, replace) {
            return _this.internalUpdateResponseHeader(name, match, replace, _this.preCacheResponseActions);
        };
        /**
         * Removes a response header before attempting to cache the response.
         * In local development this is same as calling `updateUpstreamResponseHeader` but
         * on edge it removes a header immediately after the upstream fetch has finished.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ removeUpstreamResponseHeader, proxy }) => {
         *      proxy('origin')
         *      removeUpstreamResponseHeader(HTTP_HEADERS.setCookie)
         *    })
         * ```
         * @param name The case-insensitive name of the response header
         */
        _this.removeUpstreamResponseHeader = function (name) {
            return _this.internalRemoveResponseHeader(name, _this.preCacheResponseActions);
        };
        /**
         * Adds or replaces a request header.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ setRequestHeader, proxy }) => {
         *      setRequestHeader('some-header', 'some-value')
         *      proxy('origin')
         *    })
         * ```
         *
         * @param name The case-insensitive name of the request header
         * @param value The value to set
         */
        _this.setRequestHeader = function (name, value) {
            validateWriter_1.validateSetRequestHeader(name);
            _this.scheduleExecution(_this.postCacheRequestActions, function () {
                _this.request.headers[name.toLowerCase()] = value;
            });
        };
        /**
         * Keeps count of the number of times we have started to execute any
         * workload immediately. When the counter is at zero, we are not in
         * the immediate execution mode.
         */
        _this.runImmediatelyDepthCounter = 0;
        /**
         * Runs the given callback immediately, switching the response writer object
         * into immediate execution mode.
         *
         * @param callback
         */
        _this.runImmediately = function (callback) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, , 2, 3]);
                        ++this.runImmediatelyDepthCounter;
                        return [4 /*yield*/, callback()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        --this.runImmediatelyDepthCounter;
                        return [7 /*endfinally*/];
                    case 3: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Either schedules the action for the later execution or, when running immediately,
         * executes it right away.
         *
         * @param phase Array of Functions belonging to the specific execution phase (pre-cache request, post-cache request, etc)
         * @param action Action to be executed either immediately or put into the execution array
         */
        _this.scheduleExecution = function (phase, action) {
            if (_this.runningImmediately) {
                action();
            }
            else {
                phase.push(action);
            }
        };
        /**
         * Alters a request header. Use this method to derive the new header value from the existing one.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ updateRequestHeader, proxy }) => {
         *      updateRequestHeader('some-header', /some-.*-part/gi, 'some-replacement')
         *      proxy('origin')
         *    })
         * ```
         *
         * @param name The case-insensitive name of the request header
         * @param match Regex to find the part that should be replaced.
         * @param replace Value that will replace the matched part.
         */
        _this.updateRequestHeader = function (name, match, replace) {
            validateWriter_1.validateUpdateRequestHeader(name);
            _this.scheduleExecution(_this.postCacheRequestActions, function () {
                var key = name.toLowerCase();
                var currentValue = _this.request.headers[key];
                var interpolatedReplace = _this.interpolateParams(replace);
                if (Array.isArray(currentValue)) {
                    _this.request.headers[key] = currentValue.map(function (v) { return v.replace(match, interpolatedReplace); });
                }
                else if (currentValue) {
                    _this.request.headers[key] = currentValue.replace(match, interpolatedReplace);
                }
            });
        };
        /**
         * Removes a request header.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', async ({ removeRequestHeader, proxy }) => {
         *      removeRequestHeader('some-header')
         *      proxy('origin')
         *    })
         * ```
         * @param name The case-insensitive name of the request header
         */
        _this.removeRequestHeader = function (name) {
            validateWriter_1.validateRemoveRequestHeader(name);
            _this.scheduleExecution(_this.postCacheRequestActions, function () {
                delete _this.request.headers[name.toLowerCase()];
            });
        };
        /**
         * Returns the service worker with proper edge and browser cache headers
         * @param path The path to the service worker relative to the root directory of your app
         *
         * **Example**
         *
         * ```js
         *  new Router()
         *    .get('/service-worker.js', ({ serviceWorker }) => {
         *      serviceWorker('dist/service-worker.js')
         *    })
         * ```
         */
        _this.serviceWorker = function (path) {
            _this.cache({
                edge: {
                    maxAgeSeconds: 30758400,
                },
                browser: {
                    // It is critical that the service worker is never cached in the browser or it may never update.
                    // This can be catastrophic if a broken service worker is installed since it can prevent the site
                    // from being accessed at all
                    maxAgeSeconds: 0,
                },
            });
            _this.serveStatic(path);
        };
        /**
         * Serves an HTML app shell from a static file.
         * @param indexHtmlPath The path to the app shell html file
         *
         * **Example**
         *
         * ```js
         *  new Router()
         *    .fallback(({ appShell }) => {
         *      appShell('dist/index.html')
         *    })
         * ```
         */
        _this.appShell = function (indexHtmlPath) {
            _this.setResponseHeader(constants_1.HTTP_HEADERS.contentType, 'text/html');
            _this.serveStatic(indexHtmlPath);
        };
        /**
         * Sends the necessary response headers to allow CORS
         * @param config
         *
         * **Example**
         *
         * ```js
         *  new Router()
         *    .match('/api/:path*', ({ allowCors }) => {
         *      allowCors({
         *        origin: '*', // this is the default
         *        methods: ['get', 'post'],
         *        headers: ['x-some-header'],
         *        maxAge: 60 * 60, // one hour
         *        credentials: true
         *      })
         *    })
         * ```
         */
        _this.allowCors = function (config) {
            if (config === void 0) { config = {}; }
            _this.setResponseHeader('Access-Control-Allow-Origin', config.origin || '*');
            if (config.methods) {
                _this.setResponseHeader('Access-Control-Allow-Methods', config.methods.join(', '));
            }
            if (config.headers) {
                _this.setResponseHeader('Access-Control-Allow-Headers', config.headers.join(', '));
            }
            if (config.maxAge) {
                _this.setResponseHeader('Access-Control-Max-Age', config.maxAge.toString());
            }
            if (config.credentials != null) {
                _this.setResponseHeader('Access-Control-Allow-Credentials', config.credentials.toString());
            }
        };
        /**
         * Sends content back to client. If content is a string, the respons will be sent
         * directly from the edge. If it is a function, the request will be computed by a JavaScript worker.
         *
         * **Example**
         *
         * ```
         *  new Router()
         *    .get('/some/path', ({ send }) => {
         *      return send('<html><body>Hello World!</body></html>', 200, 'OK')
         *    })
         * ```
         * @param content The response body as a string
         * @param statusCode The status to send
         * @param statusMessage The status message to send
         */
        _this.send = function (content, statusCode, statusMessage) {
            if (statusCode === void 0) { statusCode = 200; }
            _this.setCreateResponseAction(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.response.statusCode = statusCode;
                    this.response.statusMessage = statusMessage;
                    if (typeof content === 'function') {
                        this.response.body = content();
                    }
                    else {
                        this.response.body = content;
                    }
                    return [2 /*return*/];
                });
            }); });
        };
        /**
         * Execute the provided callback function in the cloud. The callback is passed the request and the response.
         *
         * Use this method when you need to compute a response in the cloud rather than at the edge or at build time. A common example
         * is when the response must be computed based on request parameters, headers, or cookies.
         *
         * A common example is to look up the destination for a redirect from an external API:
         *
         * ```js
         *  new Router()
         *    .get('/products/:id', ({ redirect, compute }) => {
         *      compute(async (request, response) => {
         *        const destination = await getDestinationFromAPI(request.params.id)
         *        redirect(destination)
         *      })
         *    })
         * ```
         *
         * This method can be combined with `cache` to compute responses in the cloud and cache them at edge:
         *
         * ```js
         *  new Router()
         *    .get('/products/:id', ({ cache, redirect, compute }) => {
         *      cache({
         *        edge: {
         *          maxAgeSeconds: 60 * 60 * 24,
         *          staleWhileRevalidateSeconds: 60 * 60,
         *        }
         *      })
         *      compute(async (request, response) => {
         *        const destination = await getDestinationFromAPI(request.params.id)
         *        redirect(destination)
         *      })
         *    })
         * ```
         *
         * @param callback A function to run in the cloud to compute the response
         */
        _this.compute = function (callback) {
            _this.setCreateResponseAction(function () { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // We need to clear createResponseAction because the compute callback will likely send it's own response
                            // If we don't clear createResponseAction, setCreateResponseAction will throw a validation error which prevents multiple responses from being sent
                            this.createResponseAction = undefined;
                            return [4 /*yield*/, this.runImmediately(function () { return callback(_this.request, _this.response); })];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * Send json error response to client
         * @private
         * @param err
         */
        _this.onRouteError = function (err) {
            var errorResponse = {
                status: 'error',
                message: err.message,
            };
            // Some errors are marked as user errors. We log those for higher visibility.
            var isUserError = err.isUserError;
            if (isUserError) {
                console.error(logo_1.errorLogLabel + " " + err.message);
            }
            if (process.env.NODE_ENV !== 'production') {
                errorResponse = {
                    message: "An error occured while running route " + _this.route.toString() + ": " + err.message,
                    // We don't send the stack for user errors as they are raised from our code
                    // but indicate issues in user's code.
                    stack: !isUserError ? err.stack : undefined,
                    url: _this.request.url,
                };
            }
            try {
                _this.response.setHeader(constants_1.HTTP_HEADERS.contentType, 'application/json');
                _this.response.writeHead(500);
                _this.response.end(JSON.stringify(errorResponse));
            }
            catch (e) {
                console.error(logo_1.errorLogLabel + " Could not write error response because headers have already been sent.", errorResponse);
            }
        };
        _this.request = req;
        _this.response = res;
        _this.route = route;
        _this.context = context;
        return _this;
    }
    /**
     * Called at the end of the request to send the response back to the browser. Methods like proxy,
     * serveStatic, and render will replace this method with one that actually sends a response.
     * @private
     * @returns True if there send response was defined and invoked, otherwise false.
     */
    ResponseWriter.prototype.sendResponse = function () {
        return __awaiter(this, void 0, void 0, function () {
            var sendResponse, _a, _b, action, cachedResponse, cacheKey, _c, _d, action, _e, _f, action, cached, _g, _h, action;
            var e_2, _j, e_3, _k, e_4, _l, e_5, _m;
            return __generator(this, function (_o) {
                switch (_o.label) {
                    case 0:
                        sendResponse = false;
                        try {
                            for (_a = __values(this.preCacheRequestActions), _b = _a.next(); !_b.done; _b = _a.next()) {
                                action = _b.value;
                                action();
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_b && !_b.done && (_j = _a.return)) _j.call(_a);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        if (Cache_1.isCacheEnabled()) {
                            cacheKey = this.context.cacheKey || CacheKey_1.default.create(this.request, this.cacheKey);
                            cachedResponse = Cache_1.getCachedResponse(cacheKey);
                            if (this.cacheKey) {
                                // we put the custom cache key on the context so that it can be used by a later route which generates the response.  This is common, for example, with Next and Nuxt apps, which generate response via middleware.
                                this.context.cacheKey = cacheKey;
                            }
                            if (!this.validatePrefetch(cachedResponse)) {
                                console.log(logo_1.infoLogLabel + " throttle " + this.request.url);
                                return [2 /*return*/, true];
                            }
                        }
                        if (!cachedResponse) return [3 /*break*/, 1];
                        sendResponse = true;
                        new timing_1.InternalTiming(timing_1.InternalNames.edgeCache).set(timing_1.CacheValue.hit);
                        this.applyCachedResponse(cachedResponse);
                        return [3 /*break*/, 4];
                    case 1:
                        try {
                            for (_c = __values(this.postCacheRequestActions), _d = _c.next(); !_d.done; _d = _c.next()) {
                                action = _d.value;
                                action();
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_k = _c.return)) _k.call(_c);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                        if (!this.createResponseAction) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.createResponseAction()];
                    case 2:
                        _o.sent();
                        sendResponse = true;
                        _o.label = 3;
                    case 3:
                        try {
                            for (_e = __values(this.preCacheResponseActions), _f = _e.next(); !_f.done; _f = _e.next()) {
                                action = _f.value;
                                action();
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (_f && !_f.done && (_l = _e.return)) _l.call(_e);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                        _o.label = 4;
                    case 4:
                        if (sendResponse && !this.streaming && !cachedResponse && Cache_1.isCacheEnabled()) {
                            cached = Cache_1.maybeCacheResponse({
                                response: this.response,
                                // @ts-ignore - cacheKey can't actually be undefined here because it will be set if isCacheEnabled() is true
                                cacheKey: cacheKey,
                                context: this.context,
                            });
                            new timing_1.InternalTiming(timing_1.InternalNames.edgeCache).set(cached ? timing_1.CacheValue.cached : timing_1.CacheValue.pass);
                        }
                        try {
                            for (_g = __values(this.postCacheResponseActions), _h = _g.next(); !_h.done; _h = _g.next()) {
                                action = _h.value;
                                action();
                            }
                        }
                        catch (e_5_1) { e_5 = { error: e_5_1 }; }
                        finally {
                            try {
                                if (_h && !_h.done && (_m = _g.return)) _m.call(_g);
                            }
                            finally { if (e_5) throw e_5.error; }
                        }
                        if (sendResponse && !this.streaming) {
                            this.logCacheStatus();
                            timing_1.addTimings(this.response);
                            if (this.response.statusCode) {
                                this.response.writeHead(this.response.statusCode, this.response.statusMessage || undefined);
                            }
                            this.response.end(this.response.body);
                        }
                        return [2 /*return*/, sendResponse];
                }
            });
        });
    };
    /**
     * Logs the cache status when running locally with caching is enabled
     */
    ResponseWriter.prototype.logCacheStatus = function () {
        if (Cache_1.isCacheEnabled()) {
            // for now we only add x-xdn-t when running with --cache because the only measurement we include is oc=cached|pass|hit
            var status_1 = this.response.getHeader(constants_1.HTTP_HEADERS.xXdnCachingStatus);
            var hitOrMiss = timing_1.getInternalTiming(timing_1.InternalNames.edgeCache);
            var url = this.request.url;
            console.log(logo_1.infoLogLabel + " " + hitOrMiss + " " + url + (status_1 ? " (" + status_1 + ")" : ''));
        }
    };
    /**
     * Copies the body, headers, and status from the cached response
     * to the outgoing response.
     * @param cachedResponse The cached response
     */
    ResponseWriter.prototype.applyCachedResponse = function (cachedResponse) {
        var e_6, _a;
        this.response.statusCode = cachedResponse.statusCode;
        this.response.statusMessage = cachedResponse.statusMessage;
        this.response.body = cloneDeep_1.default(cachedResponse.body);
        try {
            for (var _b = __values(Object.keys(cachedResponse.headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var name_1 = _c.value;
                // We have to cloneDeep because some headers are arrays rather than just strings.
                this.response.setHeader(name_1, cloneDeep_1.default(cachedResponse.headers[name_1]));
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_6) throw e_6.error; }
        }
    };
    /**
     * Rejects the request with status 412 and returns false if ?xdn_prefetch is present and
     * no cached response was found.
     */
    ResponseWriter.prototype.validatePrefetch = function (cachedResponse) {
        var isPrefetch = Object.keys(this.request.query || {}).includes(constants_1.PREFETCH_QUERY_PARAM);
        if (isPrefetch && !cachedResponse) {
            this.response.writeHead(constants_1.XDN_UNCACHED_PREFETCH_STATUS);
            this.response.end();
            return false;
        }
        else {
            return true;
        }
    };
    /**
     * @param action
     */
    ResponseWriter.prototype.setCreateResponseAction = function (action) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.runningImmediately) return [3 /*break*/, 2];
                        return [4 /*yield*/, action()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        if (this.createResponseAction != null) {
                            throw new Error('You may only call one of the following once in your route handler: proxy, serveStatic, serviceWorker, redirect, send.');
                        }
                        this.createResponseAction = action;
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(ResponseWriter.prototype, "runningImmediately", {
        /**
         * Returns true if the object is in the running immediately mode.
         * When object is in the running immediately mode, all otherwise
         * scheduled actions like header transform operations, are immediately
         * executed.
         * @private
         */
        get: function () {
            return this.runImmediatelyDepthCounter > 0;
        },
        enumerable: true,
        configurable: true
    });
    return ResponseWriter;
}(BaseResponseWriter_1.BaseResponseWriter));
exports.default = ResponseWriter;
/**
 * @private
 * @param backendConfig
 */
function normalizeBackendConfig(backendConfig) {
    if (isString_1.default(backendConfig))
        backendConfig = { domainOrIp: backendConfig };
    return backendConfig;
}
