'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Set of methods that are to be intercepted and made noop
 * outside of the immediate mode (which is in effect only
 * during compute on serverless)
 *
 * @private
 */
var conditionallyExecutedMethods = new Set([
    'cache',
    'setRequestHeader',
    'updateRequestHeader',
    'removeRequestHeader',
    'setResponseHeader',
    'updateResponseHeader',
    'removeResponseHeader',
    'setUpstreamResponseHeader',
    'updateUpstreamResponseHeader',
    'removeUpstreamResponseHeader',
    'addResponseCookie',
    'updateResponseCookie',
    'removeResponseCookie',
    'addUpstreamResponseCookie',
    'updateUpstreamResponseCookie',
    'removeUpstreamResponseCookie',
]);
/**
 * Response writer proxy used then core router is not on the edge.
 *
 * Notes:
 * - We need this to avoid running header and other transformations on
 * both edge and in the cloud. We do this by overriding the ResponseWriter
 * header transformation methods so that they are either a noop when
 * running outside of immediate mode or immediately executing them.
 *
 * @param writer ResponseWriter to which we are proxying the requests
 *
 * @private
 */
var create = function (writer) {
    var wrapComputeConditionedFunction = function (target, property) {
        // We cannot use closures but rather functions so that we can bind them.
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!target.runningImmediately) {
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, target[property].apply(target, __spread(args))];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        }.bind(target);
    };
    return new Proxy(writer, {
        get: function (target, property) {
            if (property === 'serveStatic') {
                return wrapServeStatic(target, target.serveStatic);
            }
            else if (conditionallyExecutedMethods.has(property.toString())) {
                return wrapComputeConditionedFunction(target, property);
            }
            else {
                return target[property];
            }
        },
    });
};
exports.default = {
    create: create,
};
/**
 * Overrides the default behavior of serveStatic when running behind the edge to
 * skip trying to pull the file from S3 and just running the onNotFound function
 * because the edge has already tried and failed to pull the file from S3.
 * @param _path
 * @param options
 */
function wrapServeStatic(res, originalMethod) {
    var _this = this;
    return function (path, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // @ts-ignore We want to leave runningImmediately private
                if (res.runningImmediately) {
                    return [2 /*return*/, originalMethod.call(res, path, options)];
                }
                else if (options.onNotFound) {
                    // @ts-ignore We want to leave runImmediately private
                    res.setCreateResponseAction(function () { return res.runImmediately(function () { return options.onNotFound(res); }); });
                }
                else {
                    throw new Error('Should not get to serveStatic without onNotFound when running behind the edge.');
                }
                return [2 /*return*/];
            });
        });
    };
}
