"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var url_1 = __importDefault(require("url"));
var querystring_1 = __importDefault(require("querystring"));
/**
 * @private
 * Having a no-op BaseResponseWriter makes it easy for us to stub out the writer
 * when introspecing the router.  This is needed to implement Router.getPrefetchableRoutes
 */
var BaseResponseWriter = /** @class */ (function () {
    function BaseResponseWriter(req, res, route) {
    }
    BaseResponseWriter.prototype.cache = function (options) { };
    BaseResponseWriter.prototype.redirect = function (to, options) { };
    /**
     * Translates redirect params into normalized version that solves backward compatibility
     * issues and also takes into account query parameters that may be included in the query
     * string itself.
     *
     * @param to string to where we are redirecting the request; may have query string
     * @param options options with which we are redirecting the request
     */
    BaseResponseWriter.prototype._readRedirectParams = function (to, options) {
        var _a = 
        // Retro-compatibility, second argument used to be statusCode
        typeof options === 'number' ? { statusCode: options } : options, _b = _a.statusCode, statusCode = _b === void 0 ? 302 : _b, _c = _a.query, query = _c === void 0 ? {} : _c;
        // Parse `to` param to extract query strings from it.
        var toQuery = {};
        var parsedTo = url_1.default.parse(to);
        // istanbul ignore next - ?. gives istanbul indigestion
        if (parsedTo === null || parsedTo === void 0 ? void 0 : parsedTo.search) {
            to = to.substr(0, to.length - parsedTo.search.length);
            // @ts-ignore: whenever search is truthy query is at least an empty string
            toQuery = querystring_1.default.parse(parsedTo.query);
        }
        return {
            to: to,
            statusCode: statusCode,
            query: __assign(__assign({}, toQuery), query),
        };
    };
    BaseResponseWriter.prototype.proxy = function (backend, options) { };
    BaseResponseWriter.prototype.render = function (cb) { };
    BaseResponseWriter.prototype.stream = function (backend) { };
    BaseResponseWriter.prototype.serveStatic = function (path, options) { };
    BaseResponseWriter.prototype.updatePath = function (destination) { };
    BaseResponseWriter.prototype.rewrite = function (destination, pattern) { };
    BaseResponseWriter.prototype.setRequestHeader = function (name, value) { };
    BaseResponseWriter.prototype.updateRequestHeader = function (name, match, replace) { };
    BaseResponseWriter.prototype.removeRequestHeader = function (name) { };
    BaseResponseWriter.prototype.setUpstreamResponseHeader = function (name, value) { };
    BaseResponseWriter.prototype.updateUpstreamResponseHeader = function (name, match, replace) { };
    BaseResponseWriter.prototype.removeUpstreamResponseHeader = function (name) { };
    BaseResponseWriter.prototype.setResponseHeader = function (name, value) { };
    BaseResponseWriter.prototype.updateResponseHeader = function (name, match, replace) { };
    BaseResponseWriter.prototype.removeResponseHeader = function (name) { };
    BaseResponseWriter.prototype.addResponseCookie = function (name, value) { };
    BaseResponseWriter.prototype.updateResponseCookie = function (name, match, replace) { };
    BaseResponseWriter.prototype.removeResponseCookie = function (name) { };
    BaseResponseWriter.prototype.addUpstreamResponseCookie = function (name, value) { };
    BaseResponseWriter.prototype.updateUpstreamResponseCookie = function (name, match, replace) { };
    BaseResponseWriter.prototype.removeUpstreamResponseCookie = function (name) { };
    BaseResponseWriter.prototype.send = function (content, statusCode, statusMessage) { };
    BaseResponseWriter.prototype.compute = function (callback) { };
    BaseResponseWriter.prototype.serviceWorker = function (path) { };
    BaseResponseWriter.prototype.allowCors = function (options) { };
    BaseResponseWriter.prototype.appShell = function (indexHtmlPath) { };
    BaseResponseWriter.prototype.renderWithApp = function () { };
    return BaseResponseWriter;
}());
exports.BaseResponseWriter = BaseResponseWriter;
