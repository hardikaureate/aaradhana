"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * XDN configuration file name.
 */
exports.XDN_CONFIG_FILE = 'xdn.config.js';
/**
 * Indicate asset files that need to be uploaded under a different
 * bucket key.
 * It contains values like
 * {
 *   '/posts' => '/posts/index.html'
 * }
 */
exports.XDN_ASSET_ALIASES_FILE = 'asset-aliases.json';
/**
 * Environment variables used by XDN.
 */
exports.XDN_ENV_VARIABLES = {
    /**
     * XDN configuration environment variable key.
     */
    config: 'XDN_CONFIG',
    /**
     * Indicates whether code is running locally or in the cloud.
     * @private
     */
    deploymentType: 'XDN_DEPLOYMENT_TYPE',
    /**
     * Allows Moovweb development team to easily override the XDN version
     * during development process.
     * @private
     */
    versionOverride: 'XDN_VERSION_OVERRIDE',
};
/**
 * Indicates that code is running in AWS.
 * @private
 */
exports.XDN_DEPLOYMENT_TYPE_AWS = 'AWS';
/**
 * Prefix of all XDN headers.
 */
exports.XDN_HEADERS_PREFIX = 'x-xdn-';
/**
 * Maximum number of user headers allowed by XDN platform.
 *
 * We limit the request and response headers allowed to 70. This is due to a limitation that edge has
 * which at the moment supports up to 96 headers. Edge provider itself needs to use some of those headers
 * with the remainder used by our edge code.
 *
 * NOTE: This constant must be equal ot the constant of the same name defined in XDN buffer proxy.
 * NOTE: If this constant is updated then the constant of the same name has to be updated in @xdn/build-lambda module.
 */
exports.XDN_MAX_USER_HEADERS_ALLOWED = 70;
/**
 * Status code returned when there are too many request or response headers.
 *
 * Must be equal to HeaderOverflowError status code as defined in build lambda and XDN buffer proxy.
 */
exports.XDN_TOO_MANY_HEADERS_STATUS_CODE = 542;
/**
 * The status code returned when the xdn_prefetch query param is present and a response could not be found in the cache.
 */
exports.XDN_UNCACHED_PREFETCH_STATUS = 412;
/**
 * CDN-as-code configuration actions
 */
exports.ACTIONS = {
    setHeader: 'set-header',
    updateHeader: 'update-header',
    removeHeader: 'remove-header',
    syntheticRes: 'synthetic-response',
    updatePath: 'update-path',
    proxy: 'proxy',
    addCookie: 'add-cookie',
    updateCookie: 'update-cookie',
    removeCookie: 'remove-cookie',
};
/**
 * The backend for cloud functions
 */
exports.BACKENDS = {
    js: '__js__',
    static: '__static__',
    permanentStatic: '__permanent_static__',
    imageOptimizer: '__image_optimizer__',
};
exports.HTTP_METHODS = {
    head: 'head',
    get: 'get',
    post: 'post',
    delete: 'delete',
    put: 'put',
    patch: 'patch',
    options: 'options',
};
/**
 * Common HTTP headers.
 */
exports.HTTP_HEADERS = {
    authorization: 'authorization',
    acceptEncoding: 'accept-encoding',
    cacheControl: 'cache-control',
    contentEncoding: 'content-encoding',
    contentLength: 'content-length',
    contentType: 'content-type',
    cookie: 'cookie',
    host: 'host',
    location: 'location',
    serverTiming: 'server-timing',
    setCookie: 'set-cookie',
    userAgent: 'user-agent',
    vary: 'vary',
    xForwardedFor: 'x-forwarded-for',
    xRequestId: 'x-request-id',
    xSwCacheControl: 'x-sw-cache-control',
    xXdnBrowser: 'x-xdn-browser',
    xXdnCacheControl: 'x-xdn-cache-control',
    xXdnCachingStatus: 'x-xdn-caching-status',
    xXdnClientIp: 'x-xdn-client-ip',
    xXdnComponents: 'x-xdn-components',
    xXdnDestination: 'x-xdn-destination',
    xXdnDevice: 'x-xdn-device',
    xXdnDeviceIsBot: 'x-xdn-device-is-bot',
    xXdnGeoCity: 'x-xdn-geo-city',
    xXdnGeoCountryCode: 'x-xdn-geo-country-code',
    xXdnGeoLatitude: 'x-xdn-geo-latitude',
    xXdnGeoLongitude: 'x-xdn-geo-longitude',
    xXdnGeoPostalCode: 'x-xdn-geo-postal-code',
    xXdnMatchedRoutes: 'x-xdn-matched-routes',
    xXdnProtocol: 'x-xdn-protocol',
    xXdnRoute: 'x-xdn-route',
    xXdnStatus: 'x-xdn-status',
    xXdnT: 'x-xdn-t',
    xXdnUserT: 'x-xdn-user-t',
    xXdnVendor: 'x-xdn-vendor',
    xXdnVersion: 'x-xdn-version',
};
/**
 * Values for x-xdn-caching-status
 */
exports.CACHING_STATUS = {
    ok: 'ok',
    private: 'private',
    method: 'method',
    bodyTooBig: 'body-too-big',
    code: 'code',
    setCookie: 'set-cookie',
    noMaxAge: 'no-max-age',
};
exports.CACHEABLE_METHODS = new Set(['get', 'head']);
/**
 * When present, this query parameter will cause the XDN ro return a 412 status
 * if a response could not be found in the cache.
 */
exports.PREFETCH_QUERY_PARAM = 'xdn_prefetch';
/**
 * The name of the query parameter used to detect HEAD requests.
 */
exports.HEAD_QUERY_PARAM = 'xdn_head';
/**
 * The name of the query parameter used for the body of POST requests, which is used for the cache key
 */
exports.POST_BODY_QUERY_PARAM = 'pref_xdn_body';
/**
 * The name of the query parameter used for the method of requests, which is used for the cache key
 */
exports.METHOD_QUERY_PARAM = 'pref_xdn_method';
/**
 * Route Group name, which is used in router for fallback routes
 */
exports.ROUTES_FALLBACK = 'fallback';
/**
 * The path for the built-in image optimizer.
 */
exports.XDN_IMAGE_OPTIMIZER_PATH = '/__xdn_image_optimizer';
