"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Tasks = /** @class */ (function () {
    function Tasks() {
        this._tasks = [];
        this._resolveHandler = Function.prototype;
        this._errorHandler = function (err) {
            throw err;
        };
    }
    /**
     * Adds a task to taks array that can be resolved with tasks.resolve()
     *
     * @param tasks List of tasks to finish
     */
    Tasks.prototype.add = function () {
        var _a;
        var tasks = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            tasks[_i] = arguments[_i];
        }
        (_a = this._tasks).push.apply(_a, __spread(tasks));
        return this;
    };
    /**
     * Resolve Handler that will be called per each task with resolved value
     *
     * @param handler
     */
    Tasks.prototype.onTaskDone = function (handler) {
        this._resolveHandler = handler;
        return this;
    };
    /**
     * Error Handler that will be called per each task and can be useful
     * for ignoring the specific errors
     *
     * @param errorHandler
     */
    Tasks.prototype.onTaskError = function (errorHandler) {
        this._errorHandler = errorHandler;
        return this;
    };
    /**
     * Finishes all tasks
     */
    Tasks.prototype.resolve = function () {
        var _this = this;
        var promises = this._convertTasksToPromises().map(function (task, i) {
            return task
                .then(function (res) {
                _this._resolveHandler(res);
                return res;
            })
                .catch(function (err) {
                return _this._errorHandler(err);
            });
        });
        return Promise.all(promises);
    };
    /**
     * Returns list of tasks that are converted into promises | functions
     */
    Tasks.prototype._convertTasksToPromises = function () {
        return this._tasks.map(function (task) {
            if (typeof task !== 'function') {
                return Promise.resolve(task);
            }
            // Run the task and check if it returns a promise
            try {
                var taskResult = task();
                if (taskResult instanceof Promise) {
                    return taskResult;
                }
                // sync function results
                return Promise.resolve(taskResult);
            }
            catch (e) {
                // Return a error promise if sync task fails
                // This allows to ignore some errors with error handler
                return Promise.reject(e);
            }
        });
    };
    return Tasks;
}());
exports.default = Tasks;
