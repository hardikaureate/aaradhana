"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var PrefetchPlugin_1 = require("./PrefetchPlugin");
/**
 * Time after which we clear a given request metadata from memory.
 * This must be above usual http timeouts to be sure the request is completed.
 */
var CURRENT_REQUEST_MAP_CLEANUP_DELAY = 120000;
var DevtoolsPlugin = /** @class */ (function () {
    function DevtoolsPlugin(_a) {
        var onResponse = _a.onResponse, routeConfig = _a.routeConfig, isEnabledFn = _a.isEnabledFn;
        this.currentRequests = {};
        this.onResponse = onResponse;
        this.routeConfig = routeConfig;
        this.isEnabledFn = isEnabledFn;
    }
    /**
     * Stores information about a request to be used by subsequent plugin steps
     *
     * IMPORTANT We do **not** use a custom header to store the metadata: a custom header leads
     * to CORS pre-flight requests when using cache on a different origin, and those would likely
     * reject our header.
     * (more info https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Preflighted_requests)
     *
     * Unfortunately, there does not seem to be another way to (or if there is, feel free to fix this):
     * - store information on the request instance that we be passed along to subsequent steps
     * - identify a request uniquely with some sort of internal id
     *
     * For now, the solution is to use the normalized cache key to identify each request "uniquely",
     * although that would lead to inconsistent results if a same request happens multiple time concurrently.
     * It also adds overhead, especially for POST graphql query which serializes the body.
     *
     * After CURRENT_REQUEST_MAP_CLEANUP_DELAY, the metadata is cleared to avoid a memory leak.
     * We don't clear explicitly from cachedResponseWillBeUsed/fetchDidSucceed, as it very complex (impossible?) to do it right:
     * - we would need a counter on the current requests to be sure to not clear the metadata from concurrent equivalent request
     * - incrementing/decrementing because we don't know in advance through which
     *   plugin functions the request will go through, which is the first and which
     *   is the last. We could make assumptions but that would lead to fragility.
     */
    DevtoolsPlugin.prototype.saveRequestMetadata = function (request, metadata) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var normalizedUrl;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, PrefetchPlugin_1.normalizeRequestUrlForCache(request)];
                    case 1:
                        normalizedUrl = _c.sent();
                        if ((_a = this.currentRequests[normalizedUrl]) === null || _a === void 0 ? void 0 : _a.cleanupTimeout) {
                            clearTimeout(this.currentRequests[normalizedUrl].cleanupTimeout);
                        }
                        this.currentRequests[normalizedUrl] = {
                            metadata: __assign(__assign({}, (_b = this.currentRequests[normalizedUrl]) === null || _b === void 0 ? void 0 : _b.metadata), metadata),
                            cleanupTimeout: setTimeout(function () {
                                delete _this.currentRequests[normalizedUrl];
                            }, CURRENT_REQUEST_MAP_CLEANUP_DELAY),
                        };
                        return [2 /*return*/];
                }
            });
        });
    };
    DevtoolsPlugin.prototype.getRequestMetadata = function (request) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var normalizedUrl;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, PrefetchPlugin_1.normalizeRequestUrlForCache(request)];
                    case 1:
                        normalizedUrl = _b.sent();
                        return [2 /*return*/, ((_a = this.currentRequests[normalizedUrl]) === null || _a === void 0 ? void 0 : _a.metadata) || {}];
                }
            });
        });
    };
    /**
     * Notes:
     * - It seems that we cannot add arbitrary attributes to the request object
     *   so the best we can do is to store request info in a memory hash-map
     */
    DevtoolsPlugin.prototype.requestWillFetch = function (_a) {
        var request = _a.request;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.isEnabledFn()) {
                            return [2 /*return*/, request];
                        }
                        return [4 /*yield*/, this.saveRequestMetadata(request, { requestStart: Date.now() })];
                    case 1:
                        _b.sent();
                        return [2 /*return*/, request];
                }
            });
        });
    };
    /**
     * Called when an object is read from or written to the cache.
     *
     * Notes:
     * - It seems that we cannot add arbitrary attributes to the request object
     *   so the best we can do is to store request info in a memory hash-map
     *
     * - In case of cache 'read', we keep track of prefetch request so that we can identify them later
     *   in `cachedResponseWillBeUsed`, which is called for both hit or miss.
     *   Why here and not on response? Because in `cachedResponseWillBeUsed` we only get the cache-normalized request
     *   where xdn_prefetch query string got removed
     */
    DevtoolsPlugin.prototype.cacheKeyWillBeUsed = function (_a) {
        var request = _a.request, mode = _a.mode;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.isEnabledFn()) {
                            return [2 /*return*/, request];
                        }
                        if (!(mode === 'read')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.saveRequestMetadata(request, {
                                isPrefetch: PrefetchPlugin_1.isPrefetchRequest(request),
                            })];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/, request];
                }
            });
        });
    };
    DevtoolsPlugin.prototype.cachedResponseWillBeUsed = function (_a) {
        var request = _a.request, response = _a.cachedResponse;
        return __awaiter(this, void 0, void 0, function () {
            var isPrefetch;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.isEnabledFn()) {
                            return [2 /*return*/, response];
                        }
                        // In case of cache miss
                        if (!response)
                            return [2 /*return*/, response];
                        return [4 /*yield*/, this.getRequestMetadata(request)
                            // TTFB is hard-coded to 0 for cached response
                        ];
                    case 1:
                        isPrefetch = (_b.sent()).isPrefetch;
                        // TTFB is hard-coded to 0 for cached response
                        this.onResponse({
                            browserCache: 'hit',
                            ttfb: 0,
                            prefetch: isPrefetch,
                            request: request,
                            response: response,
                            routeConfig: this.routeConfig,
                        });
                        return [2 /*return*/, response];
                }
            });
        });
    };
    DevtoolsPlugin.prototype.fetchDidSucceed = function (_a) {
        var request = _a.request, response = _a.response;
        return __awaiter(this, void 0, void 0, function () {
            var requestStart, ttfb;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.isEnabledFn()) {
                            return [2 /*return*/, response];
                        }
                        return [4 /*yield*/, this.getRequestMetadata(request)];
                    case 1:
                        requestStart = (_b.sent()).requestStart;
                        ttfb = requestStart && Date.now() - requestStart;
                        this.onResponse({
                            browserCache: 'miss',
                            ttfb: ttfb,
                            prefetch: PrefetchPlugin_1.isPrefetchRequest(request),
                            request: request,
                            response: response,
                            routeConfig: this.routeConfig,
                        });
                        return [2 /*return*/, response];
                }
            });
        });
    };
    return DevtoolsPlugin;
}());
exports.default = DevtoolsPlugin;
