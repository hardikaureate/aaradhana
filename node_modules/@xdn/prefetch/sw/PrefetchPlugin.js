"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("@xdn/core/constants");
var constants_2 = require("../constants");
var log_1 = __importDefault(require("./log"));
var prefetch_1 = require("./prefetch");
var origin = new URL(self.origin);
function isPrefetchRequest(request) {
    var url = new URL(request.url);
    return !!url.searchParams.has(constants_1.PREFETCH_QUERY_PARAM);
}
exports.isPrefetchRequest = isPrefetchRequest;
function normalizeRequestUrlForCache(request, _a) {
    var cacheHost = (_a === void 0 ? {} : _a).cacheHost;
    return __awaiter(this, void 0, void 0, function () {
        var url, method, body, bodyParam;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    request = request.clone();
                    url = new URL(request.url);
                    // When reading/writing cacheHost URLs convert them back to origin
                    if (cacheHost && url.hostname == cacheHost.hostname) {
                        url.host = origin.host;
                        url.protocol = origin.protocol;
                    }
                    method = request.method.toLowerCase();
                    if (!(method !== 'get')) return [3 /*break*/, 2];
                    return [4 /*yield*/, request.text()];
                case 1:
                    body = _b.sent();
                    bodyParam = url.searchParams.get(constants_1.POST_BODY_QUERY_PARAM);
                    if (!bodyParam && body) {
                        url.searchParams.set(constants_1.POST_BODY_QUERY_PARAM, encodeURIComponent(body));
                    }
                    // add method to the cache key so that we can cache requests to the same path with different methods
                    url.searchParams.set(constants_1.METHOD_QUERY_PARAM, request.method.toLowerCase());
                    _b.label = 2;
                case 2:
                    // remove ?xdn_prefetch=1 so that prefetches and real requests return from the same cache space
                    url.searchParams.delete(constants_1.PREFETCH_QUERY_PARAM);
                    // Decode query parameters both when writing to cache and when reading
                    // from cache. This ensures the cache is used no matter whether the URL
                    // is encoded in either step.
                    decodeQueryParams(url);
                    return [2 /*return*/, url.toString()];
            }
        });
    });
}
exports.normalizeRequestUrlForCache = normalizeRequestUrlForCache;
var PrefetchPlugin = /** @class */ (function () {
    function PrefetchPlugin(_a) {
        var incrementRead = _a.incrementRead, incrementWrite = _a.incrementWrite, cacheHost = _a.cacheHost, prefetchUpstreamRequests = _a.prefetchUpstreamRequests;
        this.incrementRead = incrementRead;
        this.incrementWrite = incrementWrite;
        this.cacheHost = cacheHost;
        this.prefetchUpstreamRequests = prefetchUpstreamRequests;
    }
    PrefetchPlugin.prototype.requestWillFetch = function (_a) {
        var request = _a.request;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                // We need to send a clone of the request so that we can read the request body and use
                // it in the cache key in the write phase of the cacheKeyWillBeUsed method.
                return [2 /*return*/, request.clone()];
            });
        });
    };
    /**
     * Called when an object is read from or written to the cache.  Here we
     * compute cache stats and ensure that ?xdn_prefetch is removed from the cache key so
     * that future requests for prefetched resources will match.
     */
    PrefetchPlugin.prototype.cacheKeyWillBeUsed = function (_a) {
        var request = _a.request, mode = _a.mode;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                if (!isPrefetchRequest(request)) {
                    if (mode === 'read') {
                        this.incrementRead();
                    }
                    else {
                        this.incrementWrite();
                    }
                }
                return [2 /*return*/, normalizeRequestUrlForCache(request, { cacheHost: this.cacheHost })];
            });
        });
    };
    /**
     * Called when a response is about to be written to the cache.
     */
    PrefetchPlugin.prototype.cacheWillUpdate = function (_a) {
        var response = _a.response, request = _a.request;
        return __awaiter(this, void 0, void 0, function () {
            var backendRequests, urlsToPrefetch;
            return __generator(this, function (_b) {
                // If prefetchUpstreamRequests is set, we only prefetch the html pages in SPA mode
                // (e.g Angular) to get the upstream requests response header.  We don't actually want
                // to serve the html from the cache, so this returns null:
                if (this.prefetchUpstreamRequests) {
                    backendRequests = response.headers.get(constants_2.BACKEND_REQUESTS_RESPONSE_HEADER_NAME);
                    if (backendRequests) {
                        urlsToPrefetch = backendRequests.split(';');
                        urlsToPrefetch.forEach(function (url) {
                            if (url)
                                prefetch_1.prefetch(url);
                        });
                    }
                    return [2 /*return*/, null];
                }
                // Service workers do not handle redirects well. If a redirected response is put in the cache,
                // you'll see this error: "a ServiceWorker passed a redirected Response to FetchEvent.respondWith()
                // while RedirectMode is not â€˜follow"
                // Returning null here prevents the response from being cached
                if (response.redirected) {
                    log_1.default(response.url + " was not added to the cache because it was a redirect.");
                    return [2 /*return*/, null];
                }
                else {
                    log_1.default(response.url + " was added to the cache with key " + request.url + ".");
                    return [2 /*return*/, response];
                }
                return [2 /*return*/];
            });
        });
    };
    return PrefetchPlugin;
}());
exports.default = PrefetchPlugin;
/**
 * Mutates the searchParams object, ensuring that each value is decoded.
 * @param {URL} url The URL whose params should be decoded
 */
function decodeQueryParams(url) {
    var maybeDecode = function (val) {
        try {
            return decodeURIComponent(val);
        }
        catch (e) {
            // it will fail if the string has a % in it that isn't a URL-decoded entity,
            // so that means the string is already decoded so we can just return the value:
            return val;
        }
    };
    url.searchParams.forEach(function (param, key) {
        url.searchParams.set(maybeDecode(key), maybeDecode(param));
    });
}
